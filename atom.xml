<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Wiki]]></title>
  <link href="http://forresthcang.com/wiki/atom.xml" rel="self"/>
  <link href="http://forresthcang.com/wiki/"/>
  <updated>2017-03-22T21:58:52+08:00</updated>
  <id>http://forresthcang.com/wiki/</id>
  <author>
    <name><![CDATA[]]></name>
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>
  
  <entry>
    <title type="html"><![CDATA[Python 面试笔记]]></title>
    <link href="http://forresthcang.com/wiki/14892052747708.html"/>
    <updated>2017-03-11T12:07:54+08:00</updated>
    <id>http://forresthcang.com/wiki/14892052747708.html</id>
    <content type="html">
<![CDATA[<ul>
<li>
<a href="#toc_0">Python 语言特性</a>
<ul>
<li>
<a href="#toc_1">Python 的函数参数传递</a>
</li>
<li>
<a href="#toc_2">Python 中的元类</a>
</li>
<li>
<a href="#toc_3">@staticmethod 和 @classmethod</a>
</li>
<li>
<a href="#toc_4">类变量和实例变量</a>
</li>
<li>
<a href="#toc_5">Python 自省</a>
</li>
<li>
<a href="#toc_6">字典推导式</a>
</li>
<li>
<a href="#toc_7">Python 中单下划线与双下划线的区别</a>
</li>
<li>
<a href="#toc_8">迭代器和生成器</a>
</li>
<li>
<a href="#toc_9"><code>*args</code> 和 <code>**kwargs</code></a>
</li>
<li>
<a href="#toc_10">面向切面编程 AOP 和装饰器</a>
</li>
<li>
<a href="#toc_11">鸭子类型</a>
</li>
<li>
<a href="#toc_12">Python 中的重载</a>
</li>
<li>
<a href="#toc_13">新式类和旧式类</a>
</li>
<li>
<a href="#toc_14"><code>__new__</code> 和 <code>__init__</code></a>
</li>
<li>
<a href="#toc_15">单例模式</a>
<ul>
<li>
<a href="#toc_16">什么是单例模式</a>
</li>
<li>
<a href="#toc_17">1. 使用 <code>__new__</code> 方法</a>
</li>
<li>
<a href="#toc_18">2. 共享属性</a>
</li>
<li>
<a href="#toc_19">3. 装饰器版本</a>
</li>
<li>
<a href="#toc_20">4. import 方法</a>
</li>
</ul>
</li>
<li>
<a href="#toc_21">Python 中的作用域</a>
</li>
<li>
<a href="#toc_22">GIL 线程全局锁</a>
</li>
<li>
<a href="#toc_23">协程</a>
</li>
<li>
<a href="#toc_24">闭包</a>
</li>
<li>
<a href="#toc_25">lambda 函数</a>
</li>
<li>
<a href="#toc_26">Python 函数式编程</a>
</li>
<li>
<a href="#toc_27">Python 里的拷贝</a>
</li>
<li>
<a href="#toc_28">Python 垃圾回收机制</a>
<ul>
<li>
<a href="#toc_29">1. 引用计数</a>
</li>
<li>
<a href="#toc_30">2. 「标记-清除」机制</a>
</li>
<li>
<a href="#toc_31">3. 分代技术</a>
</li>
</ul>
</li>
<li>
<a href="#toc_32">Python 中 list 的实现</a>
</li>
<li>
<a href="#toc_33">Python 的 is</a>
</li>
<li>
<a href="#toc_34">read/readline/readlines</a>
</li>
<li>
<a href="#toc_35">Python 2 和 3 的区别</a>
</li>
</ul>
</li>
<li>
<a href="#toc_36">操作系统</a>
<ul>
<li>
<a href="#toc_37">select、poll 和 epoll</a>
</li>
<li>
<a href="#toc_38">调度算法</a>
</li>
<li>
<a href="#toc_39">死锁</a>
</li>
<li>
<a href="#toc_40">程序的编译和链接</a>
</li>
<li>
<a href="#toc_41">静态链接和动态链接</a>
</li>
<li>
<a href="#toc_42">虚拟内存技术</a>
</li>
<li>
<a href="#toc_43">分页和分段</a>
</li>
<li>
<a href="#toc_44">页面置换算法</a>
</li>
<li>
<a href="#toc_45">边缘触发和水平触发</a>
</li>
</ul>
</li>
<li>
<a href="#toc_46">数据库</a>
<ul>
<li>
<a href="#toc_47">事务</a>
</li>
<li>
<a href="#toc_48">数据库索引</a>
</li>
<li>
<a href="#toc_49">Redis 原理</a>
</li>
<li>
<a href="#toc_50">乐观锁和悲观锁</a>
</li>
</ul>
</li>
<li>
<a href="#toc_51">网络</a>
<ul>
<li>
<a href="#toc_52">ARP 协议</a>
</li>
<li>
<a href="#toc_53">POST 和 GET</a>
</li>
<li>
<a href="#toc_54">Cookie 和 Session</a>
</li>
<li>
<a href="#toc_55">Apache 和 Nginx 的区别</a>
</li>
<li>
<a href="#toc_56">网站用户密码保存</a>
</li>
<li>
<a href="#toc_57">HTTP 和 HTTPS</a>
</li>
<li>
<a href="#toc_58">XSRF 和 XSS</a>
</li>
<li>
<a href="#toc_59">CGI 和 WSGI</a>
</li>
<li>
<a href="#toc_60">中间人攻击</a>
</li>
<li>
<a href="#toc_61">CK10 问题</a>
</li>
<li>
<a href="#toc_62">Ajax</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">Python 语言特性</h2>

<h3 id="toc_1">Python 的函数参数传递</h3>

<p>所有的变量都可以理解为内存中一个对象的引用。</p>

<p>类型是属于对象的，而不是变量。而对象有两种，「可更改」（mutable） 与「不可更改」（inmutable） 对象。<mark>在 Python 中，strings, tuples, numbers 是不可更改的对象，list, dict 则是可以更改的对象。</mark></p>

<p>当一个引用传递给函数的时候，函数自动复制一份引用，这个函数里的引用就和外部的引用没有关系了。而在函数内的引用指向的是可变对象的时候，对它的操作就和定位了指针地址一样，可以直接在内存里进行修改。</p>

<p>参考阅读：<a href="http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference</a></p>

<h3 id="toc_2">Python 中的元类</h3>

<p>ORM 中会用到。</p>

<p>详细的解释：<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a></p>

<h3 id="toc_3">@staticmethod 和 @classmethod</h3>

<p>Python 有三个方法：即静态方法（staticmethod）、类方法（classmethod）和实例方法。</p>

<pre><code class="language-python">def foo(x):
    print &quot;executing foo(%s)&quot;%(x)

class A(object):
    def foo(self,x):
        print &quot;executing foo(%s,%s)&quot;%(self,x)

    @classmethod
    def class_foo(cls,x):
        print &quot;executing class_foo(%s,%s)&quot;%(cls,x)

    @staticmethod
    def static_foo(x):
        print &quot;executing static_foo(%s)&quot;%x

a=A()
</code></pre>

<p><code>self</code> 和 <code>cls</code> 是对类或者实例的绑定。对于一般的函数我们可以这么调用 <code>foo(x)</code>，这个函数就是最常用的，它的工作和任何东西（类、实例）无关。对于实例方法，我们知道在类中每次定义方法都需要绑定这个实例，即 <code>foo(self, x)</code> ，因为实例方法的调用离不开实例，我们需要把实例自己传给函数，调用的时候是这样的 <code>a.foo(x)</code>（其实是 <code>foo(a, x)</code>）。类方法一样，只不过它传递的是类而不是实例，<code>A.class_foo(x)</code>。注意这里的 self 和 cls 可以替换成别的参数，但是 Python 的约定就是这两个，所以还是不要改比较好。</p>

<p>对于静态方法其实和普通方法一样，不需要对谁进行绑定，唯一的区别就是需要使用 <code>a.static_foo(x)</code> 或者 <code>A.static_foo(x)</code> 这样的方式来调用。</p>

<table>
<thead>
<tr>
<th></th>
<th>实例方法</th>
<th>类方法</th>
<th>静态方法</th>
</tr>
</thead>

<tbody>
<tr>
<td>a = A()</td>
<td>a.foo(x)</td>
<td>a.class_foo(x)</td>
<td>a.static_foo(x)</td>
</tr>
<tr>
<td>A</td>
<td>不可用</td>
<td>A.class_foo(x)</td>
<td>A.static_foo(x)</td>
</tr>
</tbody>
</table>

<p>详细讨论：<a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></p>

<h3 id="toc_4">类变量和实例变量</h3>

<pre><code class="language-python">class Person:
    name=&quot;aaa&quot;

p1=Person()
p2=Person()
p1.name=&quot;bbb&quot;
print p1.name  # bbb
print p2.name  # aaa
print Person.name  # aaa
</code></pre>

<p>类变量就是供类使用的变量，实例变量就是供实例使用的。</p>

<p>这里的 <code>p1.name=&quot;bbb&quot;</code> 是实例调用了类变量，这和上面的一个问题一样，就是函数传参的问题，<code>p1.name</code> 一开始指向的是类变量 <code>Person.name</code>，但在实例的作用域里把类变量的引用改变了，就变成了一个实例变量。</p>

<p>可以对比一下下面这个例子：</p>

<pre><code class="language-python">class Person:
    name=[]

p1=Person()
p2=Person()
p1.name.append(1)
print p1.name  # [1]
print p2.name  # [1]
print Person.name  # [1]
</code></pre>

<p>参考：<a href="http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></p>

<h3 id="toc_5">Python 自省</h3>

<p>自省就是面向对象的语言所写的程序在运行时，所能知道对象的类型。简单讲就是运行时能够获得对象的类型，比如 <code>type()</code>, <code>dir()</code>, <code>getattr()</code>, <code>hasattr()</code>, <code>isinstance()</code>。</p>

<h3 id="toc_6">字典推导式</h3>

<p>2.7 中加入的内容。</p>

<pre><code class="language-python">d = {key: value for (key, value) in iterable}
</code></pre>

<h3 id="toc_7">Python 中单下划线与双下划线的区别</h3>

<pre><code class="language-python">&gt;&gt;&gt; class MyClass():
...     def __init__(self):
...             self.__superprivate = &quot;Hello&quot;
...             self._semiprivate = &quot;, world!&quot;
...
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; print mc.__superprivate
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: myClass instance has no attribute &#39;__superprivate&#39;
&gt;&gt;&gt; print mc._semiprivate
, world!
&gt;&gt;&gt; print mc.__dict__
{&#39;_MyClass__superprivate&#39;: &#39;Hello&#39;, &#39;_semiprivate&#39;: &#39;, world!&#39;}
</code></pre>

<ul>
<li><code>__foo__</code>：一种约定，Python 内部的名字，用来区别其他用户自定义的命名，以防冲突</li>
<li><code>_foo</code>：一种约定，用来指定变量是私有变量</li>
<li><code>__foo</code>：解析器用 <code>_classname__foo</code> 来代替这个名字，以区别和其他类相同的命名。</li>
</ul>

<p>参考：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></li>
<li><a href="http://www.zhihu.com/question/19754941">http://www.zhihu.com/question/19754941</a></li>
</ul>

<h3 id="toc_8">迭代器和生成器</h3>

<p>详细解释：<a href="https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html">https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html</a></p>

<h3 id="toc_9"><code>*args</code> 和 <code>**kwargs</code></h3>

<p>使用 <code>*args</code> 和 <code>**kwargs</code> 只是为了方便，并没有强制使用它们。</p>

<p>当你不确定函数中将要传入多少个参数时可以使用 <code>*args</code> ，它可以传递任意数量的参数。</p>

<p><code>**kwargs</code> 允许你使用事先未定义的参数名。</p>

<p>你也可混着使用，命名参数首先获得参数值，然后其他所有的参数都传给 <code>*args</code> 和 <code>**kwargs</code>。命名参数在列表的最前端：</p>

<pre><code class="language-python">def table_things(titlestring, **kwargs)
</code></pre>

<p><code>*args</code> 和 <code>**kwargs</code> 可以同时在函数的定义中，但是 <code>*args</code> 必须在 <code>**kwargs</code> 前面。</p>

<p>在调用函数时也可以使用 <code>*</code> 和 <code>**</code> 语法，例如：</p>

<pre><code class="language-python">&gt;&gt;&gt; def print_three_things(a, b, c):
...     print &#39;a = {0}, b = {1}, c = {2}&#39;.format(a,b,c)
...
&gt;&gt;&gt; mylist = [&#39;aardvark&#39;, &#39;baboon&#39;, &#39;cat&#39;]
&gt;&gt;&gt; print_three_things(*mylist)

a = aardvark, b = baboon, c = cat
</code></pre>

<p>它可以传递列表（或元组）并将它们解包。注意必须与它们在函数中的参数相吻合</p>

<p>参考：<a href="http://stackoverflow.com/questions/3394835/args-and-kwargs">http://stackoverflow.com/questions/3394835/args-and-kwargs</a></p>

<h3 id="toc_10">面向切面编程 AOP 和装饰器</h3>

<p>装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数本身无关的雷同代码并继续重用。概括来讲，<mark>装饰器的作用就是为已经存在的对象添加额外的功能</mark>。</p>

<p>详细参考：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python">http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python</a></li>
<li><a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html</a></li>
<li><a href="https://www.zhihu.com/question/24863332">https://www.zhihu.com/question/24863332</a></li>
</ul>

<p>什么是 AOP：</p>

<blockquote>
<p>面向切面编程（AOP是Aspect Oriented Program的首字母缩写） ，我们知道，面向对象的特点是继承、多态和封装。而封装就要求将功能分散到不同的对象中去，这在软件设计中往往称为职责分配。实际上也就是说，让不同的类设计不同的方法。这样代码就分散到一个个的类中去了。这样做的好处是降低了代码的复杂程度，使类可重用。<br/><br/>
但是人们也发现，在分散代码的同时，也增加了代码的重复性。什么意思呢？比如说，我们在两个类中，可能都需要在每个方法中做日志。按面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。<br/><br/>
也许有人会说，那好办啊，我们可以将这段代码写在一个独立的类独立的方法里，然后再在这两个类中调用。但是，这样一来，这两个类跟我们上面提到的独立的类就有耦合了，它的改变会影响这两个类。那么，有没有什么办法，能让我们在需要的时候，随意地加入代码呢？<mark>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。</mark><br/><br/>
一般而言，我们管切入到指定类指定方法的代码片段称为切面，而切入到哪些类、哪些方法则叫切入点。有了AOP，我们就可以把几个类共有的代码，抽取到一个切片中，等到需要时再切入对象中去，从而改变其原有的行为。这样看来，AOP其实只是OOP的补充而已。OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。有了AOP，OOP变得立体了。如果加上时间维度，AOP使OOP由原来的二维变为三维了，由平面变成立体了。从技术上来说，AOP基本上是通过代理机制实现的。<br/><br/>
AOP在编程历史上可以说是里程碑式的，对OOP编程是一种十分有益的补充。</p>
</blockquote>

<h3 id="toc_11">鸭子类型</h3>

<blockquote>
<p>当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。</p>
</blockquote>

<p>我们不关心对象是什么类型，到底是不是鸭子，只关心行为。</p>

<p>比如在 Python 中，有很多 file-like 的东西，StringIO/GzipFile/socket。它们有很多相同的方法，我们把它们都当做文件使用。</p>

<p>鸭子类型在动态语言中经常使用，非常灵活。使得 Python 不必像 Java 那样专门弄一堆设计模式。</p>

<h3 id="toc_12">Python 中的重载</h3>

<p><mark>Python 不支持函数重载</mark>。</p>

<p>函数重载主要是为了解决两个问题：</p>

<ul>
<li>可变参数类型</li>
<li>可变参数个数</li>
</ul>

<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数其实功能不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p>

<p>对于情况 1，函数功能相同，但参数类型不同， 在 Python 中根本不需要处理，因为 Python 可以接受任何类型的参数，如果函数功能相同，那么不同的参数类型在 Python 中很可能是相同的代码，没有必要写成两个不同的函数。</p>

<p>对于情况 2，函数功能相同，但参数个数不同，Python 中处理的方式是使用缺省参数。对那些缺少的参数设定为缺省参数即可。</p>

<p>鉴于情况 1 和情况 2 Python 都有解决方案，所以就不需要重载了。</p>

<p>但是 Python 也可以实现重载的功能。</p>

<p>参考：<a href="http://www.zhihu.com/question/20053359">http://www.zhihu.com/question/20053359</a></p>

<h3 id="toc_13">新式类和旧式类</h3>

<p>详细参考：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python">http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python</a></li>
<li><a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html">http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html</a></li>
</ul>

<h3 id="toc_14"><code>__new__</code> 和 <code>__init__</code></h3>

<ul>
<li><code>__new__</code> 是一个静态方法，而 <code>__init__</code> 是一个实例方法</li>
<li><code>__new__</code> 方法会返回一个创建的实例，而 <code>__init__</code> 什么都不返回</li>
<li>只有在 <code>__new__</code> 返回一个 cls 实例时后面的 <code>__init__</code> 才能被调用</li>
<li>当创建一个新实例时调用 <code>__new__</code>，初始化一个实例时用 <code>__init__</code></li>
</ul>

<p>参考：<a href="http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init">http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init</a></p>

<h3 id="toc_15">单例模式</h3>

<p>Important！</p>

<h4 id="toc_16">什么是单例模式</h4>

<p>单例模式，也叫单子模式，是一种常用的软件设计模式。<mark>在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。</mark>比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p>

<p>实现单例模式的思路是：一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。</p>

<p>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。</p>

<h4 id="toc_17">1. 使用 <code>__new__</code> 方法</h4>

<pre><code class="language-python">class Singleton(object):
    def __new__(cls, *args, **kw):
        if not hasattr(cls, &#39;_instance&#39;):
            orig = super(Singleton, cls)
            cls._instance = orig.__new__(cls, *args, **kw)
        return cls._instance

class MyClass(Singleton):
    a = 1
</code></pre>

<h4 id="toc_18">2. 共享属性</h4>

<p>创建实例时把所有实例的 <code>__dict__</code> 指向同一个字典，这样它们具有相同的属性和方法。</p>

<pre><code class="language-python">class Borg(object):
    _state = {}
    def __new__(cls, *args, **kw):
        ob = super(Borg, cls).__new__(cls, *args, **kw)
        ob.__dict__ = cls._state
        return ob

class MyClass2(Borg):
    a = 1
</code></pre>

<h4 id="toc_19">3. 装饰器版本</h4>

<pre><code class="language-python">def singleton(cls, *args, **kw):
    instances = {}
    def getinstance():
        if cls not in instances:
            instances[cls] = cls(*args, **kw)
        return instances[cls]
    return getinstance

@singleton
class MyClass:
  ...
</code></pre>

<h4 id="toc_20">4. import 方法</h4>

<pre><code class="language-python"># mysingleton.py
class My_Singleton(object):
    def foo(self):
        pass

my_singleton = My_Singleton()

# to use
from mysingleton import my_singleton

my_singleton.foo()
</code></pre>

<p>作为 Python 的模块是天然的单例方法。</p>

<h3 id="toc_21">Python 中的作用域</h3>

<p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p>

<p>当 Python 遇到一个变量的话它会按照如下顺序进行搜索：</p>

<p>本地作用域（Local） -&gt; 当前作用域没嵌入的作用域（Enclosing locals） -&gt; 全局/模块作用域（Global） -&gt; 内置作用域（Built-in）</p>

<h3 id="toc_22">GIL 线程全局锁</h3>

<p>线程全局锁（Global Interpreter Lock），即 Python 为了保证线程安全而采取的独立线程运行的机制，说白了就是一个核只能在同一时间运行一个线程。</p>

<p>解决办法就是多进程和下面的协程（协程也只是单 CPU，但能减小切换代价提升性能）。</p>

<p>参考：<a href="http://www.oschina.net/translate/pythons-hardest-problem">http://www.oschina.net/translate/pythons-hardest-problem</a></p>

<h3 id="toc_23">协程</h3>

<p>待补充</p>

<h3 id="toc_24">闭包</h3>

<p>闭包（Closure）是函数式编程中的重要语法结构。</p>

<p><mark>当一个内嵌函数引用其外部作用域的变量，我们就会得到一个闭包。</mark> 创建一个闭包必须满足以下几点：</p>

<ul>
<li>必须有一个内嵌函数</li>
<li>内嵌函数必须引用外部函数的变量</li>
<li>外部函数的返回值必须是内嵌函数</li>
</ul>

<h3 id="toc_25">lambda 函数</h3>

<p>Python 中的 lambda 函数即匿名函数。</p>

<p>参考：<a href="https://www.zhihu.com/question/20125256">https://www.zhihu.com/question/20125256</a></p>

<h3 id="toc_26">Python 函数式编程</h3>

<p>详细参考：<a href="http://coolshell.cn/articles/10822.html">http://coolshell.cn/articles/10822.html</a></p>

<h3 id="toc_27">Python 里的拷贝</h3>

<p>引用和 <code>copy()</code>, <code>deepcopy()</code> 的区别：</p>

<pre><code class="language-python">import copy
a = [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]  #原始对象

b = a  #赋值，传对象的引用
c = copy.copy(a)  #对象拷贝，浅拷贝
d = copy.deepcopy(a)  #对象拷贝，深拷贝

a.append(5)  #修改对象a
a[4].append(&#39;c&#39;)  #修改对象a中的[&#39;a&#39;, &#39;b&#39;]数组对象

print &#39;a = &#39;, a
print &#39;b = &#39;, b
print &#39;c = &#39;, c
print &#39;d = &#39;, d

输出结果：
a =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]
b =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]
c =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]
d =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]
</code></pre>

<h3 id="toc_28">Python 垃圾回收机制</h3>

<p>Python GC 主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用基础上，通过「标记-清除」（mark and sweep）解决容器对象可能产生的循环引用问题，通过「分代回收」（generation collection）以空间换时间的方法提高垃圾回收效率。</p>

<h4 id="toc_29">1. 引用计数</h4>

<p>PyObject 是每个对象必有的内容，其中，<code>ob_refcnt</code> 就是作为引用计数。当一个对象有新的引用时，它的 <code>ob_refcnt</code> 就会增加，当引用它的对象呗删除，它的 <code>ob_refcnt</code> 就会减少。引用计数为 0 时，该对象的生命就结束了。</p>

<p>优点：</p>

<ul>
<li>简单</li>
<li>实时性</li>
</ul>

<p>缺点：</p>

<ul>
<li>维护引用计数消耗资源</li>
<li>循环引用</li>
</ul>

<h4 id="toc_30">2. 「标记-清除」机制</h4>

<p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为结点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p>

<h4 id="toc_31">3. 分代技术</h4>

<p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个「代」，垃圾收集频率随着「代」存货时间的增大而减小，存货时间通常利用经过几次垃圾回收来度量。</p>

<p>Python 默认定义了三代对象集合，索引数越大，对象存货时间越长。</p>

<p>举例：当某些内存块 M 经过了 3 此垃圾收集的清洗之后还存活时，我们就将内存块 M 划分到一个集合 A 中去，而新分配的内存都划分到集合 B 中去。当垃圾收集开始工作时，大多数情况都只对集合 B 进行垃圾回收，而对集合 A 进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存减少了，效率自然就提高了。在这个过程中，集合 B 中的某些内存块由于存货时间长而会被转移到集合 A 中，当然，集合 A 中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代机制而被延迟。</p>

<h3 id="toc_32">Python 中 list 的实现</h3>

<p>详细参考：<a href="http://www.jianshu.com/p/J4U6rR">Python 中 List 的实现</a></p>

<h3 id="toc_33">Python 的 is</h3>

<p><code>is</code> 是对比地址，<code>==</code> 是对比值</p>

<h3 id="toc_34">read/readline/readlines</h3>

<ul>
<li>read 读取整个文件</li>
<li>readline 读取下一行，使用生成器的方式</li>
<li>readlines 读取整个文件到一个迭代器以供我们遍历</li>
</ul>

<h3 id="toc_35">Python 2 和 3 的区别</h3>

<p>详细参考：<a href="http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/">http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/</a></p>

<h2 id="toc_36">操作系统</h2>

<h3 id="toc_37">select、poll 和 epoll</h3>

<p>待补充。</p>

<h3 id="toc_38">调度算法</h3>

<ol>
<li>先来先服务（FCFS, First Come First Server）</li>
<li>短作业优先（SJF, Shortest Job First）</li>
<li>最高优先权调度（Priority Scheduling）</li>
<li>时间片轮转（RR, Round Robin）</li>
<li>多级反馈队列调度（multilevel feedback queue scheduling）</li>
</ol>

<p>实时调度算法：</p>

<ol>
<li>最早截止时间优先 EDF</li>
<li>最低松弛度优先 LLF</li>
</ol>

<h3 id="toc_39">死锁</h3>

<p>原因：</p>

<ol>
<li>竞争资源</li>
<li>程序推进顺序不当</li>
</ol>

<p>必要条件：</p>

<ol>
<li>互斥条件</li>
<li>请求和保持条件</li>
<li>不剥夺条件</li>
<li>环路等待条件</li>
</ol>

<p>处理死锁的基本方法：</p>

<ol>
<li>预防死锁</li>
<li>避免死锁（银行家算法）</li>
<li>检测死锁（资源分配图）</li>
<li>解除死锁

<ul>
<li>剥夺资源</li>
<li>撤销进程</li>
</ul></li>
</ol>

<h3 id="toc_40">程序的编译和链接</h3>

<p>待补充。</p>

<h3 id="toc_41">静态链接和动态链接</h3>

<p>静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来，静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库。</p>

<p>动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算（被调用的那部分）动态代码的逻辑地址，然后等到某个时候，程序有需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以这种方式使程序初始化的时间较短，但运行期间的性能比不上静态链接的程序。</p>

<h3 id="toc_42">虚拟内存技术</h3>

<p>虚拟存储器是指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储系统。</p>

<h3 id="toc_43">分页和分段</h3>

<p>分页：用户程序的地址空间被划分为若干个固定大小的区域，称为「页」，相应的，内存空间分成若干个物理块，页和块的大小相等，可将用户程序的任一页放在内存的任一块中，实现了离散分配。</p>

<p>分段：将用户程序的地址空间分成若干个大小不等的「段」，每段可以定义一组相对完整的逻辑信息。存储分配时，以段位单位，段与段在内存中可以不相邻接，也实现了离散分配。</p>

<p>分页与分段的主要区别：</p>

<ol>
<li>页的信息是物理单位，分页是为了实现非连续分配，以便解决内存碎片问题，或者说分页是由于系统管理的需要，段是信息的逻辑单位，它含有一组意义相对完整的信息，分段的目的是为了更好得实现共享，满足用户的需要。</li>
<li>页的大小固定，由系统决定，将逻辑地址划分为页号和页内地址是由及其硬件实现的。而段的长度却不固定，决定于用户所编写的程序，通常由编译程序在对源程序进行编译时根据信息的性质来划分。</li>
<li>分页的作业地址空间是一维的，分段的地址空间是二维的。</li>
</ol>

<h3 id="toc_44">页面置换算法</h3>

<ol>
<li>最先置换算法 OPT：不可能实现</li>
<li>先进先出 FIFO</li>
<li>最近最久未使用算法 LRU：最近一段时间里最久没有使用过的页面予以置换</li>
<li>clock 算法</li>
</ol>

<h3 id="toc_45">边缘触发和水平触发</h3>

<p>边缘触发是指每当状态发生变化时发生一个 IO 事件，条件触发是只要满足条件就发生一个 IO 事件。</p>

<h2 id="toc_46">数据库</h2>

<h3 id="toc_47">事务</h3>

<p>数据库事务（Database Transaction），是指作为单个逻辑工作单元执行的一系列操作，要么完全得执行，要么完全得不执行。</p>

<h3 id="toc_48">数据库索引</h3>

<p>参考资料：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>

<h3 id="toc_49">Redis 原理</h3>

<p>待补充。</p>

<h3 id="toc_50">乐观锁和悲观锁</h3>

<ul>
<li>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</li>
<li>乐观锁：假定不会发生并发冲突，只在提交操作时检查是否违反数据完整性</li>
</ul>

<h2 id="toc_51">网络</h2>

<h3 id="toc_52">ARP 协议</h3>

<p>地址解析协议（Address Resolution Protocol），其基本功能为透过目标设备的 IP 地址，查询目标的 Mac 地址，以保证通信的顺利进行。它是 IPv4 网络层必不可少的协议，不过在 IPv6 中已不再适用，并被邻居发现协议（NDP）替代。</p>

<h3 id="toc_53">POST 和 GET</h3>

<p>参考阅读：</p>

<ul>
<li><a href="http://www.cnblogs.com/nankezhishi/archive/2012/06/09/getandpost.html">GET和POST有什么区别？及为什么网上的多数答案都是错的</a></li>
<li><a href="https://www.zhihu.com/question/31640769?rf=37401322">post 相比get 有很多优点，为什么现在的HTTP通信中大多数请求还是使用get？</a></li>
</ul>

<h3 id="toc_54">Cookie 和 Session</h3>

<table>
<thead>
<tr>
<th></th>
<th>Cookie</th>
<th>Session</th>
</tr>
</thead>

<tbody>
<tr>
<td>存储位置</td>
<td>客户端</td>
<td>服务器端</td>
</tr>
<tr>
<td>目的</td>
<td>跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td>
<td>跟踪会话</td>
</tr>
<tr>
<td>安全性</td>
<td>不安全</td>
<td>安全</td>
</tr>
</tbody>
</table>

<p>Session 技术是要使用到 Cookie 的，之所以出现 Session 技术，主要是为了安全。</p>

<h3 id="toc_55">Apache 和 Nginx 的区别</h3>

<p>Nginx 相对于 Apache 的优点：</p>

<ul>
<li>轻量级：同样的 Web 服务，比 Apache 占用更少的内存及资源</li>
<li>抗并发：Nginx 处理请求时异步非阻塞的，支持更多的并发连接，而 Apache 则是阻塞型的，在高并发下 Nginx 能保持低资源低消耗高性能</li>
<li>配置简洁</li>
<li>高度模块化的设计，编写模块相对简单</li>
<li>社区活跃</li>
</ul>

<p>Apache 相对 Nginx 的优点：</p>

<ul>
<li>rewrite 比 Nginx 的 rewrite 强大</li>
<li>模块很多，基本可以想到的都能找到</li>
<li>bug 少，Nginx bug 多</li>
<li>很稳定</li>
</ul>

<h3 id="toc_56">网站用户密码保存</h3>

<ul>
<li>明文保存</li>
<li>明文 hash 后保存，如 md5</li>
<li>MD5 + salt 方式，这个 salt 可以随机</li>
<li>知乎使用了 Bcrypy 加密（待考）</li>
</ul>

<h3 id="toc_57">HTTP 和 HTTPS</h3>

<p>待补充。</p>

<h3 id="toc_58">XSRF 和 XSS</h3>

<p>参考 <a href="14889309726832.html">计算机网络</a></p>

<h3 id="toc_59">CGI 和 WSGI</h3>

<p>CGI 是通用网关接口，是连接 web 服务器和应用程序的接口，用户通过 CGI 来获取动态数据或文件等。CGI 程序是一个独立的程序，它可以用几乎所有语言来写。</p>

<p>WSGI（Web Server Gateway Interface），是 Python 应用程序或 Web 框架与服务器之间的一种接口，WSGI 的其中一个目的就是让用户可以用统一的语言（Python）来编写前后端。</p>

<h3 id="toc_60">中间人攻击</h3>

<p>中间人攻击（Man in the middle attack, MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为它们正在通过一个私密的连接与对方直接对话，但事实上整个对话都被攻击者完全控制。</p>

<h3 id="toc_61">CK10 问题</h3>

<p>指的是服务器同时支持成千上万个客户端的问题。</p>

<p>参考阅读：<a href="http://www.kegel.com/c10k.html">http://www.kegel.com/c10k.html</a></p>

<h3 id="toc_62">Ajax</h3>

<p>Ajax（Asynchronous JavaScript and Xml，异步的 JavaScript 和 XML），是指在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode 刷题笔记]]></title>
    <link href="http://forresthcang.com/wiki/14891114444883.html"/>
    <updated>2017-03-10T10:04:04+08:00</updated>
    <id>http://forresthcang.com/wiki/14891114444883.html</id>
    <content type="html">
<![CDATA[<ul>
<li>
<a href="#toc_0">001 Two Sum [Easy]</a>
<ul>
<li>
<a href="#toc_1">题目</a>
</li>
<li>
<a href="#toc_2">时间复杂度</a>
</li>
<li>
<a href="#toc_3">思路</a>
</li>
<li>
<a href="#toc_4">代码</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">002 Add Two Numbers [Medium]</a>
<ul>
<li>
<a href="#toc_6">时间复杂度</a>
</li>
<li>
<a href="#toc_7">思路</a>
</li>
<li>
<a href="#toc_8">代码</a>
</li>
<li>
<a href="#toc_9">笔记</a>
</li>
</ul>
</li>
<li>
<a href="#toc_10">007 Reverse Integer [Easy]</a>
<ul>
<li>
<a href="#toc_11">题目</a>
</li>
<li>
<a href="#toc_12">思路</a>
</li>
<li>
<a href="#toc_13">代码</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">001 Two Sum [Easy]</h2>

<h3 id="toc_1">题目</h3>

<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>

<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>

<p>Example：</p>

<pre><code>Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
</code></pre>

<h3 id="toc_2">时间复杂度</h3>

<p>\(O(n)\)</p>

<h3 id="toc_3">思路</h3>

<p>比较暴力的做法就是用两个循环来穷举，这样的话时间复杂度会达到 \(O(n^2)\)。</p>

<p>另外一种思路就是使用一个 dict 来保存外循环中 target 与 num 的差值，这样在数组中只要发现这个值就可以直接返回了，而在 dic 查找的时间复杂度为 \(O(1)\)。</p>

<h3 id="toc_4">代码</h3>

<pre><code class="language-python">class Solution(object):
    def twoSum(self, nums, target):
        &quot;&quot;&quot;
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        &quot;&quot;&quot;
        dic = {}
        for i, num in enumerate(nums):
            if num in dic:
                return [dic[num], i]
            else:
                dic[target - num] = i
</code></pre>

<h2 id="toc_5">002 Add Two Numbers [Medium]</h2>

<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>

<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>

<p>Example:</p>

<pre><code>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
Output: 7 -&gt; 0 -&gt; 8
</code></pre>

<h3 id="toc_6">时间复杂度</h3>

<p>\(O(n)\)</p>

<h3 id="toc_7">思路</h3>

<p>把两个数相加存在链表里，这两个数字的每一位都存在链表中，并且链表是反转的。思路很简单，就是遍历链表，把数取出来，然后加完后再添加到链表中。</p>

<p>代码写得很直白。</p>

<h3 id="toc_8">代码</h3>

<pre><code class="language-python"># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        &quot;&quot;&quot;
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        &quot;&quot;&quot;
        num1 = []
        num2 = []
        current = l1
        while current != None:
            num1.append(str(current.val))
            current = current.next
        current = l2
        while current != None:
            num2.append(str(current.val))
            current = current.next
        num1 = &#39;&#39;.join(num1)[::-1]
        num2 = &#39;&#39;.join(num2)[::-1]
        sum = int(num1) + int(num2)
        first = ListNode(str(sum)[0])
        for i in str(sum)[1:]:
            oldfirst = first
            first = ListNode(i)
            first.next = oldfirst
        return first
</code></pre>

<h3 id="toc_9">笔记</h3>

<p>翻了一下 discuss，发现我的解法实在是太 dirty 了。</p>

<p>下面这一段代码我认为还是非常优美的实现：</p>

<pre><code class="language-python">class Solution:
    def addTwoNumbers(self, l1, l2):
        def toint(node):
            return node.val + 10 * toint(node.next) if node else 0
        def tolist(n):
            node = ListNode(n % 10)
            if n &gt; 9:
                node.next = tolist(n // 10)
            return node
        return tolist(toint(l1) + toint(l2))
</code></pre>

<p>非递归版本：</p>

<pre><code class="language-python">class Solution:
    def addTwoNumbers(self, l1, l2):
        def toint(node):
            return node.val + 10 * toint(node.next) if node else 0
        n = toint(l1) + toint(l2)
        first = last = ListNode(n % 10)
        while n &gt; 9:
            n /= 10
            last.next = last = ListNode(n % 10)
        return first
</code></pre>

<p>解释一下思路。</p>

<p>首先 <code>toint(node)</code> 函数是将链表转化成 <code>int</code> 类型的数据，因为 Python 中 <code>int</code> 可以存非常大的数，所以不用考虑链表的长度。算法也很简单，因为链表是转置的，所以高位在链表后面，依次乘以 10 的 n 次方再相加就可以了。</p>

<p><code>tolist(n)</code> 函数式将计算好的数据转化成链表，再纸上拿一个一个例子画一个图就很好理解了。<code>node = ListNode(n % 10)</code> 每一次递归都创建一个节点来存放某一位的数据，<code>tolist(n // 10)</code> 每一次递归都截取一位数字。</p>

<p>非递归的方法类似。</p>

<h2 id="toc_10">007 Reverse Integer [Easy]</h2>

<h3 id="toc_11">题目</h3>

<p>Reverse digits of an integer.</p>

<p>The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.</p>

<p>Ex：</p>

<pre><code>Example1: x = 123, return 321
Example2: x = -123, return -321
</code></pre>

<h3 id="toc_12">思路</h3>

<p>这道题很简单，但是要考虑转置之后会不会溢出，但是 Python 的 <code>int</code> 是不会溢出的，所以就需要手动判断一下，INT32 最大值是 \(2^{31}-1\)，用十六进制表示就是 <code>0x7FFFFFFF</code>。</p>

<h3 id="toc_13">代码</h3>

<pre><code class="language-python">class Solution(object):
    def reverse(self, x):
        &quot;&quot;&quot;
        :type x: int
        :rtype: int
        &quot;&quot;&quot;
        if x &lt; 0:
            result = -(int(str(x).lstrip(&#39;-&#39;)[::-1]))
        else:
            result = int(str(x)[::-1])
        
        if abs(result) &gt; 0x7FFFFFFF:
            return 0
        return result
</code></pre>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算机网络]]></title>
    <link href="http://forresthcang.com/wiki/14889309726832.html"/>
    <updated>2017-03-08T07:56:12+08:00</updated>
    <id>http://forresthcang.com/wiki/14889309726832.html</id>
    <content type="html">
<![CDATA[<ul>
<li>
<a href="#toc_0">HTTP 协议</a>
<ul>
<li>
<a href="#toc_1">HTTP 的特性</a>
</li>
<li>
<a href="#toc_2">HTTP 报文</a>
<ul>
<li>
<a href="#toc_3">请求报文</a>
</li>
<li>
<a href="#toc_4">响应报文</a>
</li>
<li>
<a href="#toc_5">条件 GET</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">持久连接</a>
</li>
<li>
<a href="#toc_7">HTTP Pipelining（HTTP 管线化）</a>
</li>
<li>
<a href="#toc_8">会话跟踪</a>
</li>
<li>
<a href="#toc_9">跨站攻击</a>
<ul>
<li>
<a href="#toc_10">如何防范 CSRF 攻击？</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">XSS（Cross Site Scripting，跨站脚本攻击）</a>
<ul>
<li>
<a href="#toc_12">如何防御 XSS 攻击？</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_13">TCP 协议</a>
<ul>
<li>
<a href="#toc_14">TCP 协议的特性</a>
</li>
<li>
<a href="#toc_15">三次握手与四次握手</a>
</li>
<li>
<a href="#toc_16">SYN 攻击</a>
<ul>
<li>
<a href="#toc_17">什么是 SYN 攻击（SYN Flood）？</a>
</li>
<li>
<a href="#toc_18">如何检测 SYN 攻击？</a>
</li>
<li>
<a href="#toc_19">如何防御 SYN 攻击？</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_20">IP 协议</a>
<ul>
<li>
<a href="#toc_21">广播与多播</a>
<ul>
<li>
<a href="#toc_22">广播</a>
</li>
<li>
<a href="#toc_23">多播</a>
</li>
</ul>
</li>
<li>
<a href="#toc_24">BGP</a>
</li>
</ul>
</li>
<li>
<a href="#toc_25">Socket 编程</a>
</li>
</ul>


<h2 id="toc_0">HTTP 协议</h2>

<h3 id="toc_1">HTTP 的特性</h3>

<ul>
<li>HTTP 构建于 TCP/IP 协议之上</li>
<li>HTTP 是无连接状态的</li>
</ul>

<h3 id="toc_2">HTTP 报文</h3>

<h4 id="toc_3">请求报文</h4>

<p>HTTP 定义了与服务器交互的不同方法，最基本的方法有 4 种，分别是 <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>. <code>URL</code> 全称是资源描述符，我们可以这样任务，一个 URL 地址，它用于描述一个网络上的资源，而 HTTP 中的 GET、POST、PUT、DELETE 就对应着对这个资源的差、改、增、删 4 个操作。</p>

<ol>
<li><p>GET 用于信息获取，而且应该是<strong>安全的</strong>和<strong>幂等的</strong></p>

<p>所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用，不会影响资源的状态。</p>

<p>幂等的意味着对同一 URL 的多个请求应该返回同样的结果。</p>

<p>GET 请求报文示例：</p>

<pre><code>GET /books/?sex=man&amp;name=Professional HTTP/1.1
Host: www.wrox.com
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
Gecko/20050225 Firefox/1.0.1
Connection: Keep-Alive
</code></pre></li>
<li><p>POST 表示可能修改服务器上的资源</p>

<pre><code>POST / HTTP/1.1
Host: www.wrox.com
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
Gecko/20050225 Firefox/1.0.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 40
Connection: Keep-Alive

sex=man&amp;name=Professional
</code></pre></li>
<li><p>注意</p>

<ul>
<li>GET 可提交的数据量受 URL 长度的限制，HTTP 协议规范没有对 URL 长度进行限制。这个限制是特定的浏览器对它的限制</li>
<li>理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，处于安全考虑，服务器软件在实现时会做一定限制</li>
<li>参考上面的报文示例，可以发现 GET 和 POST 数据内容是一模一样的，只是位置不同，一个在 URL 里，一个在 HTTP 包的包体里</li>
</ul></li>
</ol>

<h4 id="toc_4">响应报文</h4>

<p>HTTP 响应与 HTTP 请求相似，HTTP 响应也由 3 个部分构成，分别是：</p>

<ul>
<li>状态行</li>
<li>响应头（Response Header）</li>
<li>响应正文</li>
</ul>

<p>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>

<p>常见的状态码有如下几种：</p>

<ul>
<li>200 OK：客户端请求成功</li>
<li>302 Moved Temporirily：请求重定向</li>
<li>304 Not Modified：文件未修改，可以直接使用缓存文件</li>
<li>400 Bad Request：由于客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthonzed：请求未经授权。这个状态码必须和 WWW-Authenticate 报头域一起使用</li>
<li>403 Forbidden：服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</li>
<li>404 Not Found：请求的资源不存在，例如输入了错误的 URL</li>
<li>500 Internal Server Error：服务器发生不可预期的错误，导致无法完成客户端的请求</li>
<li>503 Service Unavailable：服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会回复正常</li>
</ul>

<p>下面是一个 HTTP 响应的例子：</p>

<pre><code>HTTP/1.1 200 OK
Server:Apache Tomcat/5.0.12
Data: Mon,60ct2003 13:23:52 GMT
Content-Length:112

&lt;html&gt;...
</code></pre>

<h4 id="toc_5">条件 GET</h4>

<p>HTTP 条件 GET 是 HTTP 协议为了减少不必要的带宽浪费，提出的一种方案。详见：RFC2616</p>

<ol>
<li><p>HTTP 条件 GET 使用的时机</p>

<p>客户端之前已经访问过某网站，并打算再次访问该网站</p></li>
<li><p>HTTP 条件 GET 使用的方法</p>

<p>客户端想服务器发送一个包询问是否在上一次访问网站的时间后更改了页面，如果服务器没有更新，显然不需要把整个网页传给客户端，客户端只要使用本地缓存即可，如果服务器对照客户端给出的时间已经更新了客户端请求的网页，则发送这个更新了的网页给用户。</p></li>
</ol>

<p>下面是一个具体的发送接收报文的示例：</p>

<p>客户端发送请求：</p>

<pre><code>GET / HTTP/1.1
Host: www.sina.com.cn:80
If-Modified-Since:Thu, 4 Feb 2010 20:39:13 GMT
Connection: Close
</code></pre>

<p>第一次请求时，服务器端发送请求数据，之后的请求，服务器根据请求中的 If-Modified-Since 字段判断响应文件没有更新，如果没有更新，服务器返回一个 304 Not Modified 响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。</p>

<pre><code>HTTP/1.0 304 Not Modified
Date: Thu, 04 Feb 2010 12:38:41 GMT
Content-Type: text/html
Expires: Thu, 04 Feb 2010 12:39:41 GMT
Last-Modified: Thu, 04 Feb 2010 12:29:04 GMT
Age: 28
X-Cache: HIT from sy32-21.sina.com.cn
Connection: close
</code></pre>

<p>如果服务器端资源已经更新的话，就返回正常的响应。</p>

<h3 id="toc_6">持久连接</h3>

<p>我们知道 HTTP 协议采用 「请求-应答」模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连击，完成之后立即断开连接（HTTP 协议为无连接协议）；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后续请求时，Keep-Alive 功能避免了建立或者重新建立连接。</p>

<p>在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际它是被附加到 HTTP 1.0 协议上，如如过客户端浏览器支持 Keep-Alive，那么就在 HTTP 请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive。这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开，当客户端发送另外一个请求时，就是用这条已经建立的连接。</p>

<p>在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 Connection: close 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。</p>

<p>注意：</p>

<ul>
<li>HTTP Keep-Alive 简单说就是保持当前 TCP 连接，避免了重新建立连击</li>
<li>HTTP 长连接不可能一直保持，例如 Keep-Alive: timeout=5, max=100, 表示这个 TCP 通道可以保持 5 秒，max=100 表示这个长连接最多接受 100 次请求就断开</li>
<li>HTTP 是一个无状态协议，这意味着每个请求都是独立的，Keep-Alive 没能改变这个结果。另外，Keep-Alive 也不能保证客户端和服务器之间的连接一定是活跃的，在 HTTP 1.1 也是如此。唯一能保证的就是当连接被关闭时你能得到一个通知，所以不应该让程序依赖于 Keep-Alive 的保持连击特性</li>
<li>使用长连接之后，客户端、服务端怎么知道本次传输结束呢？两部分：1）判断传输数据是否达到了 Content-Length 指示的大小；2）动态生成的文件没有 Content-Length，它是分块传输（chunked），这时候就要根据 chunked 编码来判断，chunked 编码的数据在最后又一个空 chunked 块，表明本次传输数据结束。</li>
</ul>

<h3 id="toc_7">HTTP Pipelining（HTTP 管线化）</h3>

<p>默认情况下 HTTP 协议中每个传输层连接只能承载一个 HTTP 请求和响应，浏览器会在收到上一个请求的响应之后，再发送下一个请求。在使用持久连接的情况下，某个连接上消息的传递类似于「请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 —&gt; 响应3」。</p>

<p>HTTP Pipelining（管线化）是将多个 HTTP 请求整批提交的技术，在传送过程中不需要等待服务端的回应。使用 HTTP Pipelining 技术之后，某个连接上的消息变成了类似这样：「请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3」。</p>

<p>注意下面几点：</p>

<ul>
<li>管线化机制通过持久连接（persistent connection）完成，仅 HTTP/1.1 支持此技术（HTTP/1.0 不支持）</li>
<li>只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制</li>
<li>初次创建连接时不应启动管线机制，因为对方（服务器）不一定支持 HTTP/1.1 版本的协议</li>
<li>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</li>
<li>HTTP/1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可</li>
<li>由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持</li>
</ul>

<h3 id="toc_8">会话跟踪</h3>

<ul>
<li><p>什么是会话？</p>

<p>客户端打开与服务器的连接发出请求到服务器响应客户端请求的全过程称之为会话。</p></li>
<li><p>什么是会话跟踪？</p>

<p>会话跟踪指的是对一个用户对服务器的连续的请求和接受响应的监视。</p></li>
<li><p>为什么需要会话跟踪？</p>

<p>浏览器与服务器之间的通信是通过 HTTP 协议进行通信的，而 HTTP 协议是「无状态」的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才会有会话跟踪技术来实现这种要求。</p>

<ol>
<li><p>会话跟踪的常用方法</p>

<ul>
<li>URL 重写。URL 是 Web 上特定页面的地址，URL 重写的技术就是在 URL 结尾添加一个附加数据以标识该会话，把会话 ID 通过 URL 的信息传递过去，以便在服务器端进行识别不同的用户</li>
</ul></li>
<li><p>隐藏表单域</p>

<ul>
<li>将会话 ID 添加到 HTML 表单元素中提交到服务器，此标案元素并不在客户端显示</li>
</ul></li>
<li><p>Cookie</p>

<ul>
<li>Cookie 是 Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送到服务端，进而进行用户的识别。对于客户端的每次请求，服务器都会将 Cookie 发送到客户端，在客户端可以进行保存，以便下次使用。</li>
<li>客户端可以采用两种方式来保存这个 Cookie 对象，一种方式是保存在客户端内存中，称为临时 Cookie，浏览器关闭后这个 Cookie 对象将消失。另外一种方式是保存在客户机的磁盘上，称之为永久 Cookie。以后客户端只要访问该网站，就会将这个 Cookie 再次发送到服务器上，前提是这个 Cookie 在有效期内，这样就实现了对客户的跟踪。</li>
<li>Cookie 是可以被禁止的。</li>
</ul></li>
<li><p>Session</p>

<ul>
<li>每一个用户都有一个不同的 Session，各个用户之间是不能共享的，是每个用户所独享的，在 Session 中可以存放信息</li>
<li>在服务器端会创建一个 session 对象，产生一个 session ID 来标识这个 session 对象，然后将这个 session ID 放到 Cookie 中发送到客户端，下一次访问时，session ID 会发送到服务器，在服务器端进行标识不同的用户</li>
<li>session 的实现依赖于 Cookie，如果 Cookie 被禁用，那么 session 也将失效</li>
</ul></li>
</ol></li>
</ul>

<h3 id="toc_9">跨站攻击</h3>

<p>CSRF（Cross-site request forgery，跨站请求伪造）</p>

<p>CSRF（XSRF）顾名思义，是伪造请求，冒充用户在站内的正常操作。</p>

<p>例如，一论坛网站的发帖是通过 GET 请求访问，点击发帖之后 JS 把发帖内容拼接成目标 URL 并访问：</p>

<pre><code>http://example.com/bbs/create_post.php?title=标题&amp;content=内容
</code></pre>

<p>那么，我们紫瑶在论坛中发一贴，包含一链接：</p>

<pre><code>http://example.com/bbs/create_post.php?title=我是脑残&amp;content=哈哈
</code></pre>

<p>只要有用户点击了这个连接，那么他们的账户就会在不知情的情况下发不了这一帖子。既然发帖的请求可以伪造，那么删帖、转账、改密码、发邮件全部可以伪造。</p>

<h4 id="toc_10">如何防范 CSRF 攻击？</h4>

<p>可以注意以下几点：</p>

<ul>
<li>关键操作只接受 POST 请求</li>
<li>验证码。CSRF 攻击的过程中，往往是在用户不知情的情况下构造网络请求。所以如果使用验证码，那么每次操作都需要用户进行互动，从而简单有效地防御了 CSRF 攻击。但是如果你在一个网站做出任何举动都要输入验证码会严重影响用户体验，所以验证码一般只出现在特殊操作里面，或者在注册时使用</li>
<li>检测 Referer

<ul>
<li>常见的互联网页面与页面之间是存在联系的</li>
<li>通过检查 Referer 的值，我们就可以判断这个请求是合法的还是非法的，但是问题出在服务器不是任何时候都能接受到 Referer 的值，所以 Referer Check 一般用于监控 CSRF 攻击的发生，而不用来抵御攻击</li>
</ul></li>
<li>Token

<ul>
<li>目前主流的做法是使用 Token 抵御 CSRF 攻击</li>
<li>CSRF 攻击要成功的条件在于攻击者能够预测所有的参数从而构造出合法的请求。所以根据不可预测性原则，我们可以对参数进行加密从而防止 CSRF 攻击</li>
<li>另一个更通用的做法是保持原有参数不变，另外添加一个参数 Token，其值是随机的，这样攻击者因为不知道 Token 而无法构造出合法的请求进行攻击</li>
</ul></li>
</ul>

<p>Token 使用原则：</p>

<ul>
<li>Token 要足够随机（只有这样才算不可预测）</li>
<li>Token 是一次性的，即每次请求成功后要更新 Token（这样可以增加攻击难度，增加预测难度）</li>
<li>Token 要注意保密性（敏感操作使用 POST，防止操作出现在 URL）中</li>
</ul>

<h3 id="toc_11">XSS（Cross Site Scripting，跨站脚本攻击）</h3>

<p>XSS 全称「跨站脚本」，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到页面上，其他用户访问这个页面的时候就会运行这个脚本。</p>

<p>XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。</p>

<h4 id="toc_12">如何防御 XSS 攻击？</h4>

<p>理论上，所有可输入的地方没有对输入数据进行处理的话，都会存在 XSS 漏洞，漏洞的危害却绝育攻击代码的威力，攻击代码也不限于 script。防御 XSS 攻击最简单的方法，就是过滤用户的输入。</p>

<p>如果不需要用户输入 HTML，可以直接对用户输入进行 HTML escape。</p>

<p>当我们需要用户输入 HTML 的时候，需要对用户输入的内容做更加小心细致的处理。仅仅粗暴地去掉 script 标签是没有用的，任何一个合法的 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。更好的方法可能是，将用户输入使用 HTML 解析库进行解析，获取其中的数据。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从白名单中拿去。</p>

<h2 id="toc_13">TCP 协议</h2>

<h3 id="toc_14">TCP 协议的特性</h3>

<ul>
<li>TCP 提供一种面向连接的、可考的字节流服务</li>
<li>在一个 TCP 连接中，仅有两方进行彼此的通信。广播和多播不能用于 TCP</li>
<li>TCP 使用校验和，确认和重传机制来保证可靠传输</li>
<li>TCP 使用累积确认</li>
<li>TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li>
</ul>

<h3 id="toc_15">三次握手与四次握手</h3>

<p>所谓三次握手（Three-way Handshake），是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包。</p>

<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 <code>connec()</code> 时，将触发三次握手。</p>

<ul>
<li>第一次握手（SYN=1, seq=x）

<ul>
<li>客户端发送一个 TCP 的 SYN 标志位置 1 的包，指明客户端打算连接的服务器端口，以及初始序列号 X，保存在包头的序列号（Sequence Number）字段里。</li>
<li>发送完毕后，客户端进入 <code>SYN_SEND</code> 状态</li>
</ul></li>
<li>第二次握手（SYN=1, ACK=1, seq=y, ACKnum=x+1）

<ul>
<li>服务器发回确认包（ACK）应答。即 SYN 标志位和 ACK 标志位均为 1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序列号（Acknowledgement Number） 设置为客户的 ISN 加 1，即 x+1</li>
<li>发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态</li>
</ul></li>
<li><p>第三次握手（ACK=1, ACKnum=y+1）</p>

<ul>
<li>客户端再次发送确认包（ACK），SYN 标志位为 0，ACK 标志位为 1，并且把服务器发来 ACK 的序列号字段 +1，放在确定字段中发送给对方，并且在数据段放写 ISN 的 +1</li>
<li>发送完毕后，客户端进入 <code>ESTABLISHED</code> 状态，当服务器端接收到这个包时，也进入 <code>ESTABLISHED</code> 状态，TCP 握手结束。</li>
</ul>

<p><img src="http://omaacpco9.bkt.clouddn.com/2017-03-08-060918.jpg" alt=""/></p></li>
</ul>

<p>TCP 的连接的拆除需要发送四个包，因此成为四次握手（Four-way handshake），也叫做改进的三次握手。客户端或服务器均可主动法切握手动作，在 socket 编程中，任何一方执行 <code>close()</code> 操作即可产生握手动作。</p>

<ul>
<li>第一次握手（FIN=1, seq=x）

<ul>
<li>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据</li>
<li>发送完毕后，客户端进入 <code>FIN_WAIT_1</code> 状态</li>
</ul></li>
<li>第二次握手（ACK=1, ACKnum=x+1）

<ul>
<li>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接</li>
<li>发送完毕后，服务器端进入 <code>CLOSE_WAIT</code> 状态，客户端接受到这个确认包之后，进入 <code>FIN_WAIT_2</code> 状态，等待服务器端关闭连接</li>
</ul></li>
<li>第三次握手（FIN=1, seq=y）

<ul>
<li>服务器端准备好关闭连接时，向客户端发送结束连接的请求，FIN 置为 1</li>
<li>发送完毕后，服务器端进入 <code>LAST_ACK</code> 状态，等待来自客户端的最后一个 ACK</li>
</ul></li>
<li><p>第四次握手（ACK=1, ACKnum=y+1）</p>

<ul>
<li>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 <code>TIME_WAIT</code> 状态，等待可能出现的要求重传的 ACK 包</li>
<li>服务器端接收到这个确认包之后，关闭连接，进入 <code>CLOSED</code> 状态</li>
<li>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime） 之后，没有收到服务器端的 ACK，认为服务器端已经正常关闭连接，于是自己也关闭连接，计入 <code>CLOSED</code> 状态</li>
</ul>

<p><img src="http://omaacpco9.bkt.clouddn.com/2017-03-08-060951.jpg" alt=""/></p></li>
</ul>

<h3 id="toc_16">SYN 攻击</h3>

<h4 id="toc_17">什么是 SYN 攻击（SYN Flood）？</h4>

<p>在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接成为半连接（half-open connect）。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态</p>

<p>SYN 攻击指的是，攻击客户端在段时间内伪造大量不存在的 IP 地址，向服务器不断地发送 SYN 包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，正常的 SYN 请求会被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p>

<p>SYN 攻击是一种典型的 DoS/DDoS 攻击。</p>

<h4 id="toc_18">如何检测 SYN 攻击？</h4>

<p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。在 Linux/Unix 上可以使用系统自带的 netstats  命令来检测 SYN 攻击。</p>

<h4 id="toc_19">如何防御 SYN 攻击？</h4>

<p>SYN 攻击不能完全被阻止，除非将 TCP 协议重新设计。我们所做的是尽可能的减轻 SYN 攻击的危害，常见的防御 SYN 攻击的方法有如下几种：</p>

<ul>
<li>缩短超时（SYN Timeout）时间</li>
<li>增加最大半连接数</li>
<li>过滤网关防护</li>
<li>SYN Cookie 技术</li>
</ul>

<h2 id="toc_20">IP 协议</h2>

<h3 id="toc_21">广播与多播</h3>

<p>广播和多播仅用于 UDP（TCP是面向连接的）。</p>

<h4 id="toc_22">广播</h4>

<p>一共有四种广播地址：</p>

<ol>
<li><p>受限的广播</p>

<p>受限的广播地址为 255.255.255.255。该地址用于珠玑配置过程中 IP 数据报的目的地址，在任何情况下，router 不转发目的地址为 255.255.255.255 的数据报，这样的数据报近出现在本地网络中。</p></li>
<li><p>指向网络的广播</p>

<ul>
<li>指向网络的广播地址是主机号为全 1 的地址。A 类网络广播地址为 netid.255.255.255，其中 netid 为 A 类网络的网络号。</li>
<li>一个 router 必须转发指向网络的广播，但它也必须有一个不进行转发的选择</li>
</ul></li>
<li><p>指向子网的广播</p>

<p>指向子网的广播地址为主机号为全 1 且有特定子网号的地址。作为子网直接广播地址的 IP 地址需要了解子网的掩码。例如，router 收到 128.1.2.255 的数据报，当 B 类网路 128.1 的子网掩码为 255.255.255.0 时，该地址就是指向子网的广播地址；但是如果子网掩码为 255.255.254.0，该地址就不是指向子网的广播地址。</p></li>
<li><p>指向所有子网的广播</p>

<p>指向所有子网的广播也需要了解目的网络的子网掩码，以便与指向网络的广播地址区分开来。指向所有子网的广播地址的子网号和主机号为全 1. 例如，如果子网掩码为 255.255.255.0，那么 128.1.255.255 就是一个指向所有子网的广播地址。</p>

<p>当前看法是这种广播是陈旧过时的，更好的方式是使用多播而不是对所有子网的广播。</p></li>
</ol>

<p>广播示例：</p>

<pre><code>PING 192.168.0.255 (192.168.0.255): 56 data bytes 64 bytes from 192.168.0.107: icmp_seq=0 ttl=64 time=0.199 ms 64 bytes from 192.168.0.106: icmp_seq=0 ttl=64 time=45.357 ms 64 bytes from 192.168.0.107: icmp_seq=1 ttl=64 time=0.203 ms 64 bytes from 192.168.0.106: icmp_seq=1 ttl=64 time=269.475 ms
64 bytes from 192.168.0.107: icmp_seq=2 ttl=64 time=0.102 ms 64 bytes from 192.168.0.106: icmp_seq=2 ttl=64 time=189.881 ms
</code></pre>

<p>可以看到的确受到了来自两个主机的答复，其中 192.168.0.107 是本机地址。</p>

<h4 id="toc_23">多播</h4>

<p>多播又叫组播，使用 D 类地址，D 类地址分配的 28bit 均用作多播组号而不再表示其他。</p>

<p>多播组地址包括 1110 的最高 4 bit 和多播组号。它们通常可以表示为点分十进制数，范围从 224.0.0.0 到 239.255.255.255.</p>

<p>多播的出现减少了对应用不感兴趣主机的处理负荷。</p>

<p>多播的特点：</p>

<ul>
<li>允许一个或多个发送者（组播源）发送单一的数据包到多个接收者（一次的、同时的）的网络技术</li>
<li>可以大大的节省网络带宽，因为无论有多少个目标地址，在整个网络的任何一条链路上只传送单一的数据包</li>
<li>多播技术的核心就是针对如何节约网络资源的前提下保证服务质量</li>
</ul>

<p>多播示例：</p>

<pre><code>PING 224.0.0.1 (224.0.0.1): 56 data bytes
64 bytes from 192.168.0.107: icmp_seq=0 ttl=64 time=0.081 ms
64 bytes from 192.168.0.106: icmp_seq=0 ttl=64 time=123.081 ms
64 bytes from 192.168.0.107: icmp_seq=1 ttl=64 time=0.122 ms
64 bytes from 192.168.0.106: icmp_seq=1 ttl=64 time=67.312 ms
64 bytes from 192.168.0.107: icmp_seq=2 ttl=64 time=0.132 ms
64 bytes from 192.168.0.106: icmp_seq=2 ttl=64 time=447.073 ms
64 bytes from 192.168.0.107: icmp_seq=3 ttl=64 time=0.132 ms
64 bytes from 192.168.0.106: icmp_seq=3 ttl=64 time=188.800 ms
</code></pre>

<h3 id="toc_24">BGP</h3>

<ul>
<li>边界网关协议（BGP）是运行于 TCP 上的一种自治系统的路由协议</li>
<li>BGP 是唯一一个用来处理像因特网大小的网络的协议，也是唯一能够妥善处理好不想管路由域间的多路连接的协议</li>
<li>BGP 是一种外部网关协议（Exterior Gateway Protocol, EGP），与 OSPF、RIP 等 内部网关协议（Interior Gateway Protocol, IGP） 不同，BGP 不在于发现和计算路由，而在于控制路由的传播和选择最佳路由</li>
<li>BGP 使用 TCP 作为其传输层协议（端口号 179），提高了协议的可靠性</li>
<li>BGP 支持 CIDR（Classless Inter-Domain Routing，无类别域间路由）</li>
<li>路由更新时，BGP 只发送更新的路由，大大减少了 BGP 传播路由所占用的贷款，适用于在 Internet 上传播大量的路由信息</li>
<li>BGP 路由通过携带 AS 路径信息彻底解决路由环路问题</li>
<li>BGP 提供了丰富的路由策略，能够对路由实现灵活的过滤和选择</li>
<li>BGP 易于扩展，能够实行网络新的发展</li>
</ul>

<h2 id="toc_25">Socket 编程</h2>

<p>Socket 是对 TCP/IP 协议族的一种封装，是应用层与 TCP/IP 协议族通信的中间软件抽象层。从设计模式的角度来看，Socket 其实是一个门面模式，它把复杂的 TCP/IP 协议族隐藏在 Socket 接口后面，对用户来说，一组简单的接口就是全部，让 Socket 去组织数据，以符合指定的协议。</p>

<p>Socket 还可以认为是一种网络间不同计算机上的进程通信的一种方法，利用三元组（ip 地址、协议、端口）就可以唯一标识网络中的进程，网络中的进程通信可以利用这个标志与其他进程进行交互。</p>

<p>Socket 起源于 Unix，Unix 基本哲学之一就是「一切皆文件」，都可以用「open -&gt; read/write -&gt; close」 模式来进行操作。因此，Socket 也被处理为一种特殊的文件。</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《算法》笔记]]></title>
    <link href="http://forresthcang.com/wiki/14887608416607.html"/>
    <updated>2017-03-06T08:40:41+08:00</updated>
    <id>http://forresthcang.com/wiki/14887608416607.html</id>
    <content type="html">
<![CDATA[<ul>
<li>
<a href="#toc_0">1.3 背包、队列和栈</a>
<ul>
<li>
<a href="#toc_1">1.3.1 API</a>
<ul>
<li>
<a href="#toc_2">1.3.1.1 泛型</a>
</li>
<li>
<a href="#toc_3">1.3.1.2 自动装箱</a>
</li>
<li>
<a href="#toc_4">1.3.1.3 可迭代的几何类型</a>
</li>
<li>
<a href="#toc_5">1.3.1.4 背包</a>
</li>
<li>
<a href="#toc_6">1.3.1.5 先进先出队列</a>
</li>
<li>
<a href="#toc_7">1.3.1.6 下压栈</a>
</li>
<li>
<a href="#toc_8">1.3.1.7 算数表达式求值</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">1.3.2 集合数据类型的实现</a>
<ul>
<li>
<a href="#toc_10">1.3.2.1 定容栈</a>
</li>
<li>
<a href="#toc_11">1.3.2.2 泛型</a>
</li>
<li>
<a href="#toc_12">1.3.2.3 调整数组的大小</a>
</li>
<li>
<a href="#toc_13">1.3.2.4 对象游离</a>
</li>
<li>
<a href="#toc_14">1.3.2.5 迭代</a>
</li>
</ul>
</li>
<li>
<a href="#toc_15">1.3.3 链表</a>
<ul>
<li>
<a href="#toc_16">1.3.3.1 结点记录</a>
</li>
<li>
<a href="#toc_17">1.3.3.8 栈的实现</a>
</li>
<li>
<a href="#toc_18">1.3.3.9 队列的实现</a>
</li>
<li>
<a href="#toc_19">1.3.3.10 背包的实现</a>
</li>
</ul>
</li>
<li>
<a href="#toc_20">1.3.4 综述</a>
</li>
</ul>
</li>
<li>
<a href="#toc_21">1.4 算法分析</a>
<ul>
<li>
<a href="#toc_22">1.4.1 科学方法</a>
</li>
<li>
<a href="#toc_23">1.4.3 数学模型</a>
</li>
<li>
<a href="#toc_24">1.4.4 增长数量级的分类</a>
</li>
<li>
<a href="#toc_25">1.4.5 设计更快的算法</a>
</li>
<li>
<a href="#toc_26">1.4.7 注意事项</a>
<ul>
<li>
<a href="#toc_27">1.4.7.1 大常数</a>
</li>
<li>
<a href="#toc_28">1.4.7.2 非决定性的内循环</a>
</li>
<li>
<a href="#toc_29">1.4.7.3 指令时间</a>
</li>
</ul>
</li>
<li>
<a href="#toc_30">1.4.8 处理对于输入的依赖</a>
<ul>
<li>
<a href="#toc_31">1.4.8.1 输入模型</a>
</li>
<li>
<a href="#toc_32">1.4.8.3 随机化算法</a>
</li>
<li>
<a href="#toc_33">1.4.8.5 均摊分析</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_34">1.5 案例研究：union-find 算法</a>
</li>
<li>
<a href="#toc_35">2.1 初级排序算法</a>
<ul>
<li>
<ul>
<li>
<a href="#toc_36">2.1.1.3 额外的内存使用</a>
</li>
</ul>
</li>
<li>
<a href="#toc_37">2.1.2 选择排序</a>
</li>
<li>
<a href="#toc_38">2.1.3 插入排序</a>
</li>
<li>
<a href="#toc_39">2.1.6 希尔排序</a>
</li>
</ul>
</li>
<li>
<a href="#toc_40">2.2 归并排序</a>
<ul>
<li>
<a href="#toc_41">2.2.1 原地归并的抽象方法</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">1.3 背包、队列和栈</h2>

<p>研究方法：1）学习其 API 和用例；2）讨论数据类型的值和所有可能的表示方法；3）各种操作的实现。</p>

<h3 id="toc_1">1.3.1 API</h3>

<p>每份 API 都含有一个无参数的构造函数、一个向集合中添加单个元素的方法、一个测试集合是否为空的方法和一个返回集合大小的方法。Stack 和 Queue 都含有一个能够删除集合中的特定元素的方法。</p>

<p>背包：</p>

<table>
<thead>
<tr>
<th></th>
<th>Bag()</th>
<th>创建一个空背包</th>
</tr>
</thead>

<tbody>
<tr>
<td>void</td>
<td>add(item)</td>
<td>添加一个空元素</td>
</tr>
<tr>
<td>bool</td>
<td>isEmpty()</td>
<td>背包是否为空</td>
</tr>
<tr>
<td>int</td>
<td>size()</td>
<td>背包中元素的数量</td>
</tr>
</tbody>
</table>

<p>先进先出（FIFO）队列:</p>

<table>
<thead>
<tr>
<th></th>
<th>Queue()</th>
<th>创建空队列</th>
</tr>
</thead>

<tbody>
<tr>
<td>void</td>
<td>enqueue(item)</td>
<td>添加一个元素</td>
</tr>
<tr>
<td>Item</td>
<td>dequeue()</td>
<td>删除最早添加的元素</td>
</tr>
<tr>
<td>bool</td>
<td>isEmpty()</td>
<td>队列是否为空</td>
</tr>
<tr>
<td>int</td>
<td>size()</td>
<td>队列中元素数量</td>
</tr>
</tbody>
</table>

<p>下压（后进先出，LIFO）栈：</p>

<table>
<thead>
<tr>
<th></th>
<th>Stack()</th>
<th>创建一个空栈</th>
</tr>
</thead>

<tbody>
<tr>
<td>void</td>
<td>push(item)</td>
<td>添加一个元素</td>
</tr>
<tr>
<td>Item</td>
<td>pop()</td>
<td>删除最近添加的元素</td>
</tr>
<tr>
<td>bool</td>
<td>isEmpty()</td>
<td>栈是否为空</td>
</tr>
<tr>
<td>int</td>
<td>size()</td>
<td>栈中的元素数量</td>
</tr>
</tbody>
</table>

<h4 id="toc_2">1.3.1.1 泛型</h4>

<p>因为这里使用的 Python 语言来实现书中的代码，所以不存在泛型的问题，Python 是鸭子类型。</p>

<h4 id="toc_3">1.3.1.2 自动装箱</h4>

<p>自动讲一个原始数据类型转换为一个封装类型被称为自动装箱，自动将一个封装类型转换为原始数据类型被称为自动拆箱。</p>

<h4 id="toc_4">1.3.1.3 可迭代的几何类型</h4>

<p>对应 Python 中的 Iterable 类型。</p>

<h4 id="toc_5">1.3.1.4 背包</h4>

<p>背包是一种不支持从中删除元素的几何数据类型——它的目的就是帮助用例收集元素并迭代遍历所有收集到的元素。迭代的顺序不确定且与用例无关。</p>

<h4 id="toc_6">1.3.1.5 先进先出队列</h4>

<p>先进先出队列（简称队列）是一种基于先进先出（FIFO）策略的集合类型。</p>

<p><img src="http://omaacpco9.bkt.clouddn.com/2017-03-06-011739.jpg" alt=""/></p>

<h4 id="toc_7">1.3.1.6 下压栈</h4>

<p>下压栈（简称栈）是一种基于后进先出（LIFO）策略的几何类型。典型例子：1）邮件系统；2）浏览器。</p>

<h4 id="toc_8">1.3.1.7 算数表达式求值</h4>

<p>递归定义：<em>算数表达式</em>可能是一个数、或者是一个由左括号、一个算数表达式、一个运算符、另一个算数表达式和一个右括号组成的表达式。（简单起见，这里定义的是未省略括号的算数表达式）。</p>

<p>E.W.Dijkstra 在 20 世纪 60 年代发明了一个非常简单的算法，用两个栈（一个用于保存运算符，一个用于保存操作数）完成了这个任务。</p>

<p>我们根据以下 4 种情况从左到右逐个将这些实体送入栈处理：</p>

<ol>
<li>将操作数压入操作数栈；</li>
<li>将运算符压入运算符栈；</li>
<li>忽略左括号；</li>
<li>在遇到右括号时，弹出一个运算符，弹出所需数量的操作数，并将运算符和操作数的运算结果压入操作数栈。</li>
</ol>

<p>一个用栈实现的简单解释器例子：</p>

<pre><code class="language-python">def evaluate(expression):
    ops = Stack()
    vals = Stack()
    
    for s in expression:
        if s == &#39;(&#39;:
            continue
        elif s == &#39;+&#39;:
            ops.push(s)
        elif s == &#39;-&#39;:
            ops.push(s)
        elif s == &#39;*&#39;:
            ops.push(s)
        elif s == &#39;/&#39;:
            ops.push(s)
        elif s == &#39;)&#39;:
            op = ops.pop()
            v = vals.pop()
            if op == &#39;+&#39;:
                v = vals.pop() + v
            elif op == &#39;-&#39;:
                v = vals.pop() - v
            elif op == &#39;*&#39;:
                v = vals.pop() * v
            elif op == &#39;/&#39;:
                v = vals.pop() / v
            vals.push(v)
        else:
            vals.push(s)
    return vals[0]
</code></pre>

<h3 id="toc_9">1.3.2 集合数据类型的实现</h3>

<h4 id="toc_10">1.3.2.1 定容栈</h4>

<p>定容栈是一种表示容量固定的字符串栈的抽象数据类型，它的 API 和 Stack 的 API 有所不同：它只能处理 String 值，它要求用例制定一个容量且不支持迭代。实现一份 API 的第一步就是选择数据的表示方式，对于 <code>FixedCapacityStackOfStrings</code>，我们可以选用数组。</p>

<p>API:</p>

<table>
<thead>
<tr>
<th></th>
<th>FixedCapacityStackOfStrings(size)</th>
<th>创建一个容量为 size 的空栈</th>
</tr>
</thead>

<tbody>
<tr>
<td>void</td>
<td>push(item:str)</td>
<td>添加一个字符串</td>
</tr>
<tr>
<td>str</td>
<td>pop()</td>
<td>删除最近添加的字符串</td>
</tr>
<tr>
<td>bool</td>
<td>isEmpty()</td>
<td>栈是否为空</td>
</tr>
<tr>
<td>int</td>
<td>size()</td>
<td>栈中字符串数量</td>
</tr>
</tbody>
</table>

<p>数据类型的实现：</p>

<pre><code class="language-python">class FixedCapacityStackOfStrings:
    def __init__(self, size):
        _a = []     # stack entries
        _size = size
        N = 0      # stack index
        

    def isEmpty(self):
        return N == 0

    def size(self):
        return N
    
    def push(self, item):
        N += 1
        _a[N] = item

    def pop(self):
        N -= 1
        return _a[N]
</code></pre>

<ul>
<li>数组中的元素顺序和它们被插入的顺序相同</li>
<li>当 N 为 0 时栈为空</li>
<li>栈的顶部位于 <code>_a[N-1]</code></li>
</ul>

<h4 id="toc_11">1.3.2.2 泛型</h4>

<p>如果上面代码是用 Java 写的话，确实只能处理 String 对象，但是 Python 是动态类型的语言，不存在泛型的问题。</p>

<h4 id="toc_12">1.3.2.3 调整数组的大小</h4>

<p>选择用数组表示栈内容意味着用例必须预先估计栈的最大容量（在 Python 中数组是动态变化的，所以不需要，这里为了模拟）。在 Java 中，数组一旦创建，其大小是无法改变的，因此栈使用的空间只能是这个最大容量的一部分。选择大容量的用例在栈为空或几乎为空时会浪费大量的内存。<code>push()</code> 方法需要在代码中检测栈是否已满，我们的 API 中也应该含有一个 <code>isFull()</code> 的方法来允许用例检测栈是否已满。我们在此省略了它实现的代码，因为我们希望用例从处理栈已满的问题中解脱出来，如我们原始的 Stack API 所示。因此，我们修改了数组的实现，动态调整数组的大小，使得它既足以保存所有元素，又不至于浪费过多的空间。</p>

<p>首先，实现一个方法将栈移动到另一个大小不同的数组中：</p>

<pre><code class="language-python">def resize(self, max):
   temp = []
   _size = max
   for i in range(N):
       temp[i] = _a[i]
   a = temp
</code></pre>

<p>现在，在 <code>push()</code> 中，检查数组是否太小。具体来说，我们会通过检查栈代销 N 和数组大小 <code>_size</code> 是否相等来检查数组是否能容纳新的元素。如果没有多余的空间，我们会将数组的长度加倍，然后既可以和之前一样用 <code>a[N++] = item</code> 插入新元素了：</p>

<pre><code class="language-python">def push(self, item):
   if N == _size:
       self.resize(2*_size)
   N += 1
   _a[N] = item
</code></pre>

<p>类似，在 <code>pop()</code> 中，首先删除栈顶的元素，然后如果数组太大我们就将它的长度减半。只要稍加思考，技能明白正确的检测条件是栈大小是否小鱼数组的四分之一。在数组长度被减半之后，它的状态为半满，在下次需要改变数组大小之前人能够进行多次 <code>push()</code> 和 <code>pop()</code> 操作。</p>

<pre><code class="language-python">def pop(self):
   N -= 1
   item = _a[N]
   _a[N] = None
   if N &gt; 0 and N == _size/4:
       resize(_size/2)
   return item
</code></pre>

<p>在这个实现中，栈永远都不会溢出，使用率也永远不会低于四分之一。</p>

<h4 id="toc_13">1.3.2.4 对象游离</h4>

<p>Java 的垃圾收集策略是回收所有无法被访问的对象的内存。在我们队 <code>pop()</code> 的实现中，被弹出的元素引用仍然存在于数组中。这个元素实际上已经是一个孤儿了——它永远不会被再访问了，但 Java 的垃圾收集器没法知道这一点，除非该引用被覆盖。即使用例已经不再需要这个元素了，数组中的引用仍然可以让它继续存在，这种情况（保存一个不需要的对象的引用）成为<strong>游离</strong>。</p>

<h4 id="toc_14">1.3.2.5 迭代</h4>

<p>集合类数据类型的基本操作之一就是，能够使用 Python 的 for-in 语句通过迭代遍历并处理集合中的每个元素。这种方式的代码既清晰又简介，且不依赖与集合数据类型的具体实现。</p>

<p>好处：1）我们无需改变任何用例代码就可以随意切换不同的表示方法；2）更重要的是，从用例的角度来说，无需知晓类的实现细节用例也能使用迭代。</p>

<p>在 Python 中，需要在类中实现 <code>__iter__()</code> 和 <code>__next__()</code> 。</p>

<pre><code class="language-python">def __iter__(self):
     return self

def __next__(self):
     index = 0
     if index &gt; _size:
         raise StopIteration
     else:
         index += 1
         return self._a[index-1]
</code></pre>

<p>例如，我们在实现 Queue 的 API 时，可以使用两个实例变量作为索引，一个变量 head 指向队列的开头，一个变量 tail 指向队列的结尾。在删除一个元素时，使用 head 访问它并将 head 加 1；在插入一个元素时，使用 tail 保存它并将 tail 加 1.如果某个索引在增加之后越过了数组的边界则将它重置为 0.</p>

<p>下压（LIFO）栈（能够动态调整数组大小的实现）：</p>

<pre><code class="language-python">class ResizingArrayStack(object):
    a = []
    N = 0

    def isEmpty(self):
        return N == 0

    def size(self):
        return N

    def resize(self, max):
        temp = []
        for i in range(N):
            temp[i] = a[i]
        a = temp

    def push(self, item):
        if N == len(self.a):
            self.resize(2*len(self.a))
        N += 1
        a[N] = item

    def pop(self):
        N -= 1
        item = a[N]
        a[N] = None
        if N &gt; 0 and N == len(self.a):
            self.resize(len(self.a)/2)

    def __iter__(self):
        return self

    def __next__(self):
        index = N - 1
        if index == 0:
            raise StopIteration
        else:
            index -= 1
            return a[index]
</code></pre>

<p>这份支持迭代的 Stack API 的实现是所有集合抽象数据类型实现的模板。它将所有元素保存在数组中，并动态调整数组大小以保持数组大小和栈大小之比小于一个常数。</p>

<h3 id="toc_15">1.3.3 链表</h3>

<blockquote>
<p>定义：链表是一种递归的数据结构，它为空（None），或者是指向一个结点（node）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。</p>
</blockquote>

<p>在这个定义中，<code>结点</code>是一个可能含有任意类型数据的抽象实体，它所包含的指向结点的应用显示了它在构造链表之中的作用。</p>

<h4 id="toc_16">1.3.3.1 结点记录</h4>

<pre><code class="language-python">class Node(object):
        def __init__(self, item):
             self.item = item
             self.next = None
             
        def get_item(self):
                return self.item
                
        def get_next(self):
                return self.next
                
        def set_item(self, item):
                self.item = item
                
        def set_next(self, next):
                self.next = next
</code></pre>

<h4 id="toc_17">1.3.3.8 栈的实现</h4>

<p>下压堆栈（链表实现）：</p>

<pre><code class="language-python">class Node(object):
    def __init__(self, item):
        self.item = item
        self.next = None

class Stack(object):
    def __init__(self):
        self.first = None
        self.N = 0
        
    def isEmpty(self):
        return self.N == 0
    
    def size(self):
        return self.N
    
    def push(self, item):
        oldfirst = self.first
        self.first = Node(item)
        self.first.next = oldfirst
        self.N += 1
        
    def pop(self):
        item = self.first.item
        self.first = self.first.next
        self.N -= 1
        return item
</code></pre>

<h4 id="toc_18">1.3.3.9 队列的实现</h4>

<p>基于链表数据结构实现 Queue API 也很简单。它将队列表示为一条从最早插入的元素到最近插入的元素的链表，实例变量 first 指向队列的开头，实例变量 last 指向 队列的结尾。这样，要讲一个元素入列（<code>enqueue()</code>），我们就将它添加到表尾（但是在链表为空时需要将 first 和 last 都指向新节点）；要将一个元素出列（<code>dequeue()</code>），我们就删除表头的结点（代码和 Stack 的 <code>pop()</code> 相同，只是当链表为空时需要更新 last 的值）。<code>size()</code> 和 <code>isEmpty()</code> 方法的实现和 Stack 相同。</p>

<p>和刚才一样，我们用链表达到了最优设计目标：<strong>它可以处理任意类型数据，所需的空间总是和集合大小成正比，操作所需时间总是和集合大小无关</strong>。</p>

<p>先进先出队列的实现：</p>

<pre><code class="language-python">class Queue(object):
    def __init__(self):
        self.first = None  # 指向最早添加的结点的链接
        self.last = None  # 指向最近添加的结点的链接
        self.N = 0
        
    def isEmpty(self):
        return self.N == 0
    
    def size(self):
        return self.N
    
    def enqueue(self, item):
        oldlast = self.last
        self.last = Node(item)
        self.last.next = None
        if self.isEmpty():
            self.first = self.last
        else:
            oldlast.next = self.last
        self.N += 1
        
    def dequeue(self):
        item = self.first.item
        self.first = self.first.next
        if self.isEmpty():
            self.last = None
        self.N -= 1
        return item
</code></pre>

<p>在结构化存储数据集时，<strong>链表是数组的一种重要的替代方式</strong>。事实上，编程语言历史上的一块里程碑就是 McCathy 在 20 世纪 50 年代发明的 LISP 语言，而链表则是这种语言组织程序和数据的主要结构。</p>

<h4 id="toc_19">1.3.3.10 背包的实现</h4>

<p>用链表数据结构实现我们的 Bag API 只需要将 Stack 中的 <code>push()</code> 方法改名为 <code>add()</code>，并去掉 <code>pop()</code> 的实现即可。</p>

<p>对于 Stack，链表的访问顺序是后进先出；对于 Queue，链表的访问顺序是先进先出；对于 Bag，它正好也是后进先出的顺序，但顺序并不重要。</p>

<p>背包的实现：</p>

<pre><code class="language-python">class Bag(object):
    def __init__(self):
        self.first = None
        self.N = 0
        
    def isEmpty(self):
        return self.first is None
    
    def add(self, item):
        oldfirst = self.first
        self.first = Node(item)
        self.first.next = oldfirst
        self.N += 1
        
    def __len__(self):
        return self.N
        
    def __iter__(self):
        return _BagIterator(self.first)

class _BagIterator(object):
    def __init__(self, listhead):
        self.current = listhead

    def __iter__(self):
        return self

    def __next__(self):
        if self.current is None:
            raise StopIteration
        item = self.current.item
        self.current = self.current.next
        return item
</code></pre>

<p>这份代码中实现了迭代器（可以使用 for-in 来遍历），Stack 和 Queue 可以使用同样的方法来实现。</p>

<h3 id="toc_20">1.3.4 综述</h3>

<p>基础数据结构：</p>

<table>
<thead>
<tr>
<th>数据结构</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>

<tbody>
<tr>
<td>数组</td>
<td>通过索引可以直接访问任意元素</td>
<td>在初始化时就需要知道元素的数量</td>
</tr>
<tr>
<td>链表</td>
<td>使用的空间大小和元素数量成正比</td>
<td>需要通过引用访问任意元素</td>
</tr>
</tbody>
</table>

<p>我们在本节中研究背包、队列和栈时描述数据结构和算法的方式是全书的原型。在研究一个新的应用领域时，我们将会按照以下步骤识别目标并使用数据抽象解决问题：</p>

<ol>
<li>定义 API</li>
<li>根据特定的应用场景开发用例代码</li>
<li>描述一种数据结构（一组值得表示），并在 API 所对应的抽象数据类型的实现中根据它定义类的实例变量</li>
<li>描述算法（实现一组操作的方式），并根据它实现类中的实例方法</li>
<li>分析算法的性能特点</li>
</ol>

<p>本书中所给出的数据结构举例：</p>

<table>
<thead>
<tr>
<th>数据结构</th>
<th>抽象数据类型</th>
<th>数据表示</th>
</tr>
</thead>

<tbody>
<tr>
<td>父链接数</td>
<td>UnionFind</td>
<td>整形数组</td>
</tr>
<tr>
<td>二分查找树</td>
<td>BST</td>
<td>含有两个链接的结点</td>
</tr>
<tr>
<td>字符串</td>
<td>String</td>
<td>数组、偏移量和长度</td>
</tr>
<tr>
<td>二插堆</td>
<td>PQ</td>
<td>对象数组</td>
</tr>
<tr>
<td>散列表（拉链法）</td>
<td>SeparateChainingHashST</td>
<td>链表数组</td>
</tr>
<tr>
<td>散列表（线性探测法）</td>
<td>LinerProbingHashST</td>
<td>两个对象数组</td>
</tr>
<tr>
<td>图的邻接链表</td>
<td>Graph</td>
<td>Bag 对象数组</td>
</tr>
<tr>
<td>单词查找树</td>
<td>TrieST</td>
<td>含有链接数组的结点</td>
</tr>
<tr>
<td>三向单词查找树</td>
<td>TST</td>
<td>含有三个链接的结点</td>
</tr>
</tbody>
</table>

<h2 id="toc_21">1.4 算法分析</h2>

<h3 id="toc_22">1.4.1 科学方法</h3>

<p>科学家用来理解自然世界的方法对于研究计算机程序的运行时间同样有效：</p>

<ul>
<li>细致地观察真实世界的特点，通常还要有精确的测量</li>
<li>根据观察结果提出假设模型</li>
<li>根据模型预测未来的事件</li>
<li>继续观察并核实预测的准确性</li>
<li>如此反复直到确认预测和观察一致</li>
</ul>

<h3 id="toc_23">1.4.3 数学模型</h3>

<p>一个程序运行的总时间主要和两点有关：</p>

<ul>
<li>执行每条语句的耗时</li>
<li>执行每条语句的频率</li>
</ul>

<h3 id="toc_24">1.4.4 增长数量级的分类</h3>

<p>对增长数量级常见假设的总结：</p>

<table>
<thead>
<tr>
<th>描述</th>
<th>增长的数量级</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>

<tbody>
<tr>
<td>常数级别</td>
<td>1</td>
<td>普通语句</td>
<td>将两个数相加</td>
</tr>
<tr>
<td>对数级别</td>
<td>\(logN\)</td>
<td>二分策略</td>
<td>二分查找</td>
</tr>
<tr>
<td>线性级别</td>
<td>\(N\)</td>
<td>循环</td>
<td>找出最大元素</td>
</tr>
<tr>
<td>线性对数级别</td>
<td>\(NlogN\)</td>
<td>分治</td>
<td>归并排序</td>
</tr>
<tr>
<td>平方级别</td>
<td>\(N^2\)</td>
<td>双层循环</td>
<td>检查所有元素对</td>
</tr>
<tr>
<td>立方级别</td>
<td>\(N^3\)</td>
<td>三层循环</td>
<td>检查所有三元组</td>
</tr>
<tr>
<td>指数级别</td>
<td>\(2^N\)</td>
<td>穷举查找</td>
<td>检查所有子集</td>
</tr>
</tbody>
</table>

<p><img src="http://omaacpco9.bkt.clouddn.com/2017-03-07-124852.jpg" alt=""/></p>

<h3 id="toc_25">1.4.5 设计更快的算法</h3>

<p>学习程序的增长数量级的一个重要动力就是为了帮助我们为同一个问题设计更快地算法。</p>

<h3 id="toc_26">1.4.7 注意事项</h3>

<h4 id="toc_27">1.4.7.1 大常数</h4>

<p>在首项近似中，我们一般会忽略低级项中的常数系数，但这可能是错的。例如，当我们取函数 \(2N^2+cN\) 的近似为 ~\(2N^2\) 时，我们的假设是 c 很小。如果事实不是这样（比如 c 可能是 \(10^6\)），该近似就是错误的。因此，我们要对可能的大常数保持敏感。</p>

<h4 id="toc_28">1.4.7.2 非决定性的内循环</h4>

<p>内循环是决定性因素的假设并不是总正确的。错误的成本模型可能无法得到真正的内循环，问题规模 \(N\) 也许没有大到对指令的执行频率的数学描述中的首项大大超过其他低级项并可以忽略它们的程度。有些程序在内循环之外也有大量指令需要考虑。</p>

<h4 id="toc_29">1.4.7.3 指令时间</h4>

<p>每条指令执行所需的时间总是相同的假设并不总是正确的。例如，大多数现在计算机系统都会使用缓存技术来组织内存，在这种情况下访问大数组中的若干个并不相邻元素所需的时间可能很长。</p>

<h3 id="toc_30">1.4.8 处理对于输入的依赖</h3>

<h4 id="toc_31">1.4.8.1 输入模型</h4>

<p>一种方法是更加小心地对我们所要解决的问题所处理的输入建模。使用这种方法的困难主要有两点：</p>

<ol>
<li>输入模型可能是不切实际的</li>
<li>对输入的分析可能极端困难</li>
</ol>

<h4 id="toc_32">1.4.8.3 随机化算法</h4>

<p>为性能提供保证的一种重要的方法是引入随机性。例如，快速排序算法在最坏情况系的性能是平方级别的，但通过随机打乱输入，根据概率我们能够保证它的性能是线性对数的。每次运行该算法，它所需的时间均不相同，但它的运行时间超过超过线性对数级别的可能性小到可以忽略。与此类似，用于符号表的散列算法在最坏情况下的性能是线性级别的，但根据概率我们可以保证它的运行时间是常数级别的。</p>

<h4 id="toc_33">1.4.8.5 均摊分析</h4>

<p>相应地，提供性能保证的另一种方法是通过记录所有操作的总成本并除以操作总数来将成本均摊。在这里，我们可以允许执行一些昂贵的操作，但保持所有操作的平均数成本较低。</p>

<h2 id="toc_34">1.5 案例研究：union-find 算法</h2>

<p>为了说明我们设计和分析算法的基本方法，我们现在来学习一个具体的例子。我们的目的是强调以下几点：</p>

<ul>
<li>优秀的算法因为能够解决实际问题而变得更为重要；</li>
<li>高效算法的代码也可以很简单；</li>
<li>理解某个实现的性能特地拿是一项有趣而令人满足的挑战；</li>
<li>在解决同一个问题的多种算法之间进行选择时，科学方法是一种重要的工具；</li>
<li>迭代式改进能够让算法的效率越来越高。</li>
</ul>

<h2 id="toc_35">2.1 初级排序算法</h2>

<h4 id="toc_36">2.1.1.3 额外的内存使用</h4>

<p>排序算法的额外内存开销和运行时间是同等重要的。排序算法可以分为两类：</p>

<ul>
<li>原地排序算法</li>
<li>需要额外内存空间来存储的其他排序算法</li>
</ul>

<h3 id="toc_37">2.1.2 选择排序</h3>

<p>选择排序两个鲜明的特点：</p>

<ol>
<li>运行时间和输入无关。为了找出最小的元素而扫描一遍数组并不能为下一遍扫描提供什么信息。这种性质在某些情况下是缺点，因为使用选择排序的人可能会惊讶地发现，一个已经有序的数组或是主键全部相等的数组和一个元素随机排列的数组所用的排序时间竟然一样长。</li>
<li>数据移动是最少的。每次交换都会改变两个数组元素的值，因此选择排序用了 N 次交换——交换次数和数组的大小是线性关系。</li>
</ol>

<p>选择排序实现：</p>

<pre><code class="language-python">def selection_sort(a):
    N = len(a)
    for i in range(N):
        mi = i
        for j in range(i+1, N):
            if a[j] &lt; a[mi]:
                mi = j
        a[i], a[mi] = a[mi], a[i]
    return a
</code></pre>

<h3 id="toc_38">2.1.3 插入排序</h3>

<p>与选择排序一样，当前索引左边的所有元素都是有序的，但它们最终的最终位置还不确定，为了给更小元素腾出空间，它们可能会被移动。但是当前索引到达数组的右端时，数组排序就完成了。</p>

<p>与选择排序不同的是，插入排序所需的时间取决于输入中元素的初始顺序。例如，对一个很大且其中的元素已经有序（或接近有序）的数组进行排序将会比对随机顺序的数组或是逆序数组进行排序要快得多。</p>

<p>插入排序对于实际应用中常见的某些类型的非随机数组很有效。当插入排序对一个有序数组进行排序，运行时间是线性的。</p>

<pre><code class="language-python">def insertion_sort(a):
    for i in range(1, len(a)):
        for j in range(i, 0, -1):
            if a[j] &lt; a[j-1]:
                a[j], a[j-1] = a[j-1], a[j]
    return a
</code></pre>

<p>对于 1 到 N-1 之间的每一个 i，将 a[i] 与 a[0] 到 a[i-1] 中比它小的所有元素依次有序地交换。在索引 i 由左向右变化的过程中，它左侧的元素总是有序的，所以当 i 到达数组的右端时排序就完成了。</p>

<p>我们要考虑的更一般的情况是部分有序的数组。<strong>倒置</strong>指的是数组中的两个顺序颠倒的元素。比如 E X A M P L E 中有 11 对倒置：E-A X-A X-M X-P X-L X-E M-L M-E ... 如果数组中倒置的数量小于数组大小的某个倍数，那么我们说这个数组是部分有序的。</p>

<p>下面是几种典型的部分有序的数组：</p>

<ul>
<li>数组中每个元素都距离它的最终位置都不远</li>
<li>一个有序的大数组接一个小数组</li>
<li>数组中只有几个元素的位置不正确</li>
</ul>

<p>插入排序对这样的数组很有效，而选择排序则不然。事实上，当倒置数量很少时，插入排序很可能比本章中的其他任何算法都要快。</p>

<p>要大幅提高插入排序的速度并不难，只需要在内循环中将较大的元素都向右移动而不总是交换两个元素。</p>

<h3 id="toc_39">2.1.6 希尔排序</h3>

<p>为了展示初级排序算法性质的价值，我们将学习一种基于插入排序的快速排序算法。对于大规模乱序数组插入排序很慢，因为它智慧交换相邻的元素，因此元素只能一点一点地从数组的一段移动到另一端。希尔排序为了加快速度简单地改进了插入排序，交换不相邻的元素以对数组的局部进行排序，并最终插入排序将局部有序的数组排序。</p>

<p>希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组被称为 h 有序数组。换句话说，h 有序数组就是 h 个独立的有序数组编织在一起组成的一个数组，如下图所示。</p>

<p><img src="http://omaacpco9.bkt.clouddn.com/2017-03-09-115612.jpg" alt=""/></p>

<p>实现希尔排序的一种方法是对于每个 h，用插入排序将 h 个子数组独立地排序。但因为子数组是相互独立的，一个更简单的方法是在 h-子数组中将每个元素交换到比它大的元素之前去（将比它大的元素向右移动一格）。只需要在插入排序的代码中将移动元素的距离由 1 改为 h 即可。这样，希尔排序的实现就转化为了一个类似于插入排序但是用不同增量的过程。</p>

<p>希尔排序更高效的原因是它权衡了子数组的规模性和有序性。排序之初，各个子数组都很短，排序之后子数组都是部分有序的，这两种情况都很适合插入排序。子数组部分有序的程度取决于递增序列的选择。</p>

<pre><code class="language-python">def shell_sort(a):
    h = 1
    while h &lt; len(a) / 3:
        h = 3 * h + 1
    while h &gt;= 1:
        for i in range(int(h), len(a)):
            for j in range(i, int(h)-1, -1):
                if a[j] &lt; a[j - int(h)]:
                    a[j], a[j - int(h)] = a[j - int(h)], a[j]
        h = h / 3
    return a
</code></pre>

<h2 id="toc_40">2.2 归并排序</h2>

<p>归并：即将两个有序数组归并成一个更大的有序数组。</p>

<h3 id="toc_41">2.2.1 原地归并的抽象方法</h3>

<p>实现归并的一种直截了当的方法是将两个不同的有序数组归并到第三个数组中。</p>

<p>但是，当用归并将一个很大的数组排序时，我们需要进行很多次归并，因此在每次归并时都创建一个新数组来存储排序结果会带来问题。我们更希望有一种能够在原地归并的方法，这样就可以先将前半部分排序，再将后半部分排序，然后在数组中移动元素而不需要使用额外的空间。</p>

<p>原地归并的抽象方法：</p>

<pre><code class="language-python">
</code></pre>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[March 2017]]></title>
    <link href="http://forresthcang.com/wiki/14886163941964.html"/>
    <updated>2017-03-04T16:33:14+08:00</updated>
    <id>http://forresthcang.com/wiki/14886163941964.html</id>
    <content type="html">
<![CDATA[<ul>
<li>
<a href="#toc_0">2017/03/04</a>
<ul>
<li>
<a href="#toc_1">How do I as a student start contributing to open source?</a>
</li>
<li>
<a href="#toc_2">How can a person get selected in Google Summer of Code?</a>
</li>
<li>
<a href="#toc_3">平台后端开发(Python)面试记录</a>
</li>
<li>
<a href="#toc_4">如何为你的 GitHub 开源项目写一份优秀的 README.md 文档？</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">2017/03/04</h2>

<h3 id="toc_1"><a href="https://www.quora.com/How-do-I-as-a-student-start-contributing-to-open-source">How do I as a student start contributing to open source?</a></h3>

<p>Nimit Shah:</p>

<ol>
<li>Start contributing to an open source project that you use in your day to day life</li>
<li>Select a project from Google Summer of Code or GNOME Outreach Program for Women</li>
</ol>

<h3 id="toc_2"><a href="https://www.quora.com/How-can-a-person-get-selected-in-Google-Summer-of-Code">How can a person get selected in Google Summer of Code?</a></h3>

<p>Ashwyn Sharma:</p>

<p><strong>Do not apply for GSoC if you are not an Open Source Enthusiast!</strong></p>

<p>Crucial steps involved in the process:</p>

<ol>
<li>Start with the list of accepted organisations in the past years and pick one of them.</li>
<li>Contact the organisation telling them about yourself (in most cases - that you are a software developer who is new to their products/applications/platforms etc.) and how you wish to contribute to their codebase.</li>
<li>Get yourself familiar with the codebase. A little perseverance at this stage may prove decisive of your future with both GSoC and Open Source in general. Pick up a simple bug/feature-request from the bug tracker of the given application and try to solve it. Not only this will increase your chances of acceptance dramatically, it will also help you get familiar with the developers and of course, the code itself. An important thing to remember is to make your presence felt amongst the developer community. This will help you at later stages of the application process.</li>
<li>Provided you manage to solve the bug or develop that feature, the next step will be to commit your code to the Trunk/Central Repository.</li>
<li>Next is the application period. As soon as Google announces the list of the accepted organisations, start looking for the prospective <strong>project ideas</strong>. Think over how you can go about executing these ideas. Talk to the prospective mentors about what you think of the idea and may be fetch more details about the ins and outs of project. Though Google allows you to submit your own original ideas as well, I have always believed that its better to choose from the list of the ideas provided by the organization. However, if the idea is truly meaningful and has a feasible implementation plan, there have been instances where original ideas have been accepted as well. If you haven&#39;t already, keep working on that bug and solve it, because if you haven&#39;t really proved your coding skills to the organisation yet, then  your chances of getting accepted gets even simmer, no matter how strong your application maybe.</li>
<li>Start writing the proposal as early as possible. Make sure that before submitting the proposal, you get your proposal reviewed by your mentors as much as possible. The main ingredients of a good proposal are that it should address two kinds of audiences - one which is completely familiar with the technical details of the project (that would be your mentors and organisation devs) and the second one is a neutral not-so-technical audience which is able to understand the deliverables of the project (in most cases that would be the user base). Start coding up your idea.</li>
</ol>

<h3 id="toc_3"><a href="http://blog.csdn.net/huangxiongbiao/article/details/50733303">平台后端开发(Python)面试记录</a></h3>

<ol>
<li>手写 Python 生成器（带 yield 的函数）</li>
<li>手写链表翻转</li>
<li>Tornado 框架中的异步实现原理</li>
<li>select, poll, epoll, epoll 改进了 select/poll 的什么地方</li>
<li>线程与进程的区别</li>
<li>进程间通信方式</li>
<li>数据库原理（索引，B 树）</li>
<li>TCP 四次握手过程</li>
<li>Nginx 的转发原理</li>
<li>Linux 文件系统</li>
</ol>

<h3 id="toc_4"><a href="https://www.diycode.cc/topics/498">如何为你的 GitHub 开源项目写一份优秀的 README.md 文档？</a></h3>

<ul>
<li>Project Title: one paragraph of description goes here.</li>
<li>Getting Started: These istructions will get you a copy of the project up and running on your local machine for development and testing purposes.</li>
<li>Prerequisties: what things you need to install the software and how to install them.</li>
<li>Installing: A step by step series of examples that you have to get a development env running.</li>
<li>Running the tests: Explain how to run the automated tests for this system.</li>
<li>Break down into end to end tests: explain what these tests test and why</li>
<li>And coding style tests: expalin what these tests test and why</li>
<li>Deployment: add additional notes about how to deploy this on a live system</li>
<li>Built with</li>
<li>Contributing: please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.</li>
<li>Authors</li>
<li>License</li>
<li>Acknowledgemets</li>
</ul>

<hr/>

<p>中英文 readme 各写一份。</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Cookbook]]></title>
    <link href="http://forresthcang.com/wiki/14872260244406.html"/>
    <updated>2017-02-16T14:20:24+08:00</updated>
    <id>http://forresthcang.com/wiki/14872260244406.html</id>
    <content type="html">
<![CDATA[<h2 id="toc_0">调用父类的方法</h2>

<p><code>super()</code> 的常见用法：</p>

<ol>
<li>在 <code>__init__()</code> 方法中确保父类被正确初始化了</li>
<li>另外一个常见用法出现在覆盖 Python 特殊方法的代码中</li>
</ol>

<p>Ex:</p>

<pre><code class="language-python">class Proxy:
    def __init__(self, obj):
        self._obj = obj

    # Delegate attribute lookup to internal obj
    def __getattr__(self, name):
        return getattr(self._obj, name)

    # Delegate attribute assignment
    def __setattr__(self, name, value):
        if name.startswith(&#39;_&#39;):
            super().__setattr__(name, value) # Call original __setattr__
        else:
            setattr(self._obj, name, value)
</code></pre>

<p>在上面代码中，<code>__setattr__()</code> 的实现包含一个名字检查。如果某个属性名以 <code>_</code> 开头，就通过 <code>super()</code> 调用原始的 <code>__setattr__()</code>，否则的话就委派给类内部的代理对象 <code>self._obj</code> 去处理。这看上去有点意思，因为就算没有显式指明某个类的父类，<code>super()</code> 仍然可以有效地工作。</p>

<h2 id="toc_1">子类中扩展 Property</h2>

<p>在自雷中扩展一个 property 可能会引起很多不易察觉的问题，因为一个 property 其实是 <code>getter</code>、<code>setter</code> 和 <code>deleter</code> 方法的几何，而不是单个的方法。因此，当你扩展一个 property 的时候，你需要先确定你是否要重新定义所有的方法还是说只修改其中的一个。</p>

<h2 id="toc_2">创建新的类或实例属性</h2>

<p>描述器：一个实现了三个核心的属性访问操作（get, set, delete）的类，分别为 <code>__get__()</code>, <code>__set__()</code> 和 <code>__delete__()</code> 这三个特殊的方法。这些方法接受一个实例作为输入，之后相应的操作实例实例底层的字典。</p>

<p>为了使用一个描述器，需要将这个描述器的实例作为类属性放到一个类的定义中。</p>

<p>一个基于描述器的高级代码：</p>

<pre><code class="language-python"># Descriptor for a type-checked attribute
class Typed:
    def __init__(self, name, expected_type):
        self.name = name
        self.expected_type = expected_type
    def __get__(self, instance, cls):
        if instance is None:
            return self
        else:
            return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if not isinstance(value, self.expected_type):
            raise TypeError(&#39;Expected &#39; + str(self.expected_type))
        instance.__dict__[self.name] = value
    def __delete__(self, instance):
        del instance.__dict__[self.name]

# Class decorator that applies it to selected attributes
def typeassert(**kwargs):
    def decorate(cls):
        for name, expected_type in kwargs.items():
            # Attach a Typed descriptor to the class
            setattr(cls, name, Typed(name, expected_type))
        return cls
    return decorate

# Example use
@typeassert(name=str, shares=int, price=float)
class Stock:
    def __init__(self, name, shares, price):
        self.name = name
        self.shares = shares
        self.price = price
</code></pre>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 风格指南笔记]]></title>
    <link href="http://forresthcang.com/wiki/14871569977647.html"/>
    <updated>2017-02-15T19:09:57+08:00</updated>
    <id>http://forresthcang.com/wiki/14871569977647.html</id>
    <content type="html">
<![CDATA[<ul>
<li>
<a href="#toc_0">函数与方法装饰器</a>
</li>
<li>
<a href="#toc_1">线程</a>
</li>
<li>
<a href="#toc_2">威力过大的特性</a>
</li>
<li>
<a href="#toc_3">注释</a>
<ul>
<li>
<a href="#toc_4">模块</a>
</li>
<li>
<a href="#toc_5">函数和方法</a>
</li>
<li>
<a href="#toc_6">类</a>
</li>
<li>
<a href="#toc_7">块注释和行注释</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">类</a>
</li>
<li>
<a href="#toc_9">TODO 注释</a>
</li>
<li>
<a href="#toc_10">导入格式</a>
</li>
<li>
<a href="#toc_11">访问控制</a>
</li>
<li>
<a href="#toc_12">命名</a>
</li>
</ul>


<h2 id="toc_0">函数与方法装饰器</h2>

<ul>
<li>优点：优雅的在函数上指定一些转换，该转换可能减少一些重复代码，保持已有函数不变（enforce invariants）</li>
<li>缺点：装饰器可以在函数的参数或返回值上执行任何操作，这可能导致让人惊异的隐藏行为。而且，装饰器在导入时执行。从装饰器代码的失败中恢复更加不可能。</li>
<li>结论：如果好处很显然，就明智而谨慎的使用装饰器。装饰器应该遵守和函数一样的导入和命名规则。装饰器的 Python 文档应该清晰的说明函数是一个装饰器。请为装饰器编写单元测试。<strong>避免装饰器自身对外界的依赖（即不要依赖于文件、socket、数据库连接等）</strong>。</li>
</ul>

<h2 id="toc_1">线程</h2>

<p>优先使用 Queue 模块的 <code>Queue</code> 数据类型作为线程间的数据通信方式。另外，使用 threading 模块及其锁原语（locking primitives）。了解条件变量的合适使用方式，这样你就可以使用 <code>threading.Condition</code> 来取代低级级别的锁了。</p>

<h2 id="toc_2">威力过大的特性</h2>

<ul>
<li>Tip：避免使用这些特性</li>
<li>优点：强大的语言特性，能让你的代码更紧凑</li>
<li>缺点：使用这些很 cool 的特性十分诱人，但不是绝对必要。使用奇技淫巧的代码将更加难以阅读和调试。开始可能还好，但当你回顾代码，它们可能比那些稍长一点但是更直接的代码更加难以理解。</li>
<li>结论：在你的代码中避免使用这些特性。</li>
</ul>

<h2 id="toc_3">注释</h2>

<p>Python 有一种独一无二的注释方式：使用文档字符串。文档字符串是包、模块、类或函数的第一个语句。这些字符串可以通过对象的 <code>__doc__</code> 成员被自动提取，并且被 <code>pydoc</code> 所用。</p>

<p>组织方式：</p>

<ul>
<li>第一行以句号、问号或惊叹号结尾的概述（或者改文档字符串只有单纯的一行）</li>
<li>接着是一个空行</li>
<li>接着是文档字符串的剩余部分，它应当与文档字符串的第一行的第一个引号对齐</li>
</ul>

<h3 id="toc_4">模块</h3>

<p>每个文件应该包含一个许可样板。根据项目使用的许可（例如：Apache 2.0、BSD、LGPL、GPL）选择合适的样板。</p>

<h3 id="toc_5">函数和方法</h3>

<p>一个函数必须要有文档字符串，除非它满足以下条件：</p>

<ol>
<li>外部不可见</li>
<li>非常短小</li>
<li>简单明了</li>
</ol>

<p>文档字符串应该包含函数做什么，以及输入和输出的详细描述。通常，<strong>不应该描述「怎么做」，除非是一些复杂的算法</strong>。文档字符串应该提供足够的信息，当别人编写代码调用该函数时，他不需要看一行代码，只要看文档字符串就可以了。<strong>对于复杂的代码，在代码旁边加注释胡比使用文档字符串更有意义</strong>。</p>

<p>关于函数的几个方面应该在特定的小节中进行描述记录，这几个方面入下文所示，每节应该以一个标题行开始。标题行以冒号结尾，除标题行外，节的其他内容应被缩进 2 个空格。</p>

<ul>
<li>Args：列出每个每个参数的名字，并在名字后面使用一个冒号和空格，分隔对该参数的描述。如果描述太长超过了单行 80 个字符，使用 2 或者 4 个空格的悬挂缩进。<strong>描述应该包括所需的类型和含义</strong>。如果一个函数接受<code>可变长参数列表</code>或者<code>任意关键字参数</code>，应该详细列出这两者。</li>
<li>Returns（或者 Yields，用于生成器）：描述返回值的类型和语义，如果函数返回 None，这一部分可以省略。</li>
<li>Raises：列出与接口有关的所有异常。</li>
</ul>

<p>例子：</p>

<pre><code class="language-python">def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):
    &quot;&quot;&quot;Fetches rows from a Bigtable.

    Retrieves rows pertaining to the given keys from the Table instance
    represented by big_table.  Silly things may happen if
    other_silly_variable is not None.

    Args:
        big_table: An open Bigtable Table instance.
        keys: A sequence of strings representing the key of each table row
            to fetch.
        other_silly_variable: Another optional variable, that has a much
            longer name than the other args, and which does nothing.

    Returns:
        A dict mapping keys to the corresponding table row data
        fetched. Each row is represented as a tuple of strings. For
        example:

        {&#39;Serak&#39;: (&#39;Rigel VII&#39;, &#39;Preparer&#39;),
         &#39;Zim&#39;: (&#39;Irk&#39;, &#39;Invader&#39;),
         &#39;Lrrr&#39;: (&#39;Omicron Persei 8&#39;, &#39;Emperor&#39;)}

        If a key from the keys argument is missing from the dictionary,
        then that row was not found in the table.

    Raises:
        IOError: An error occurred accessing the bigtable.Table object.
    &quot;&quot;&quot;
    pass
</code></pre>

<h3 id="toc_6">类</h3>

<p>类应该在其定义下有一个用于描述该类的文档字符串。如果你的类有公有属性，那么文档中应该有一个属性段，并且应该遵守和函数参数相同的格式。</p>

<pre><code class="language-python">class SampleClass(object):
    &quot;&quot;&quot;Summary of class here.

    Longer class information....
    Longer class information....

    Attributes:
        likes_spam: A boolean indicating if we like SPAM or not.
        eggs: An integer count of the eggs we have laid.
    &quot;&quot;&quot;

    def __init__(self, likes_spam=False):
        &quot;&quot;&quot;Inits SampleClass with blah.&quot;&quot;&quot;
        self.likes_spam = likes_spam
        self.eggs = 0

    def public_method(self):
        &quot;&quot;&quot;Performs operation blah.&quot;&quot;&quot;
</code></pre>

<h3 id="toc_7">块注释和行注释</h3>

<p><strong>最需要些注释的是代码中那些技巧性的部分</strong>。对于复杂的操作，应该在其操作开始前写上若干行注释，对于不是一幕了然的代码，应该在其行尾添加注释。</p>

<p>为了提高可读性，注释至少应该离开代码 2 个空格。</p>

<p><strong>绝对不要描述代码</strong>，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么。</p>

<h2 id="toc_8">类</h2>

<p>如果一个类不继承自其它类，就显式的从 object 继承，嵌套类也一样。</p>

<h2 id="toc_9">TODO 注释</h2>

<p>TODO 注释应该在所有开头处包含「TODO」字符串，紧跟着的是用括号括起来的你的名字，email 地址或者其他标识符。接着必须有一行注释，解释要做什么。</p>

<p>Example：</p>

<pre><code class="language-python"># TODO(kl@gmail.com): Use a &quot;*&quot; here for string repetition.
# TODO(Zeke) Change this to use relations.
</code></pre>

<p>如果你的 TODO 是「将来做某事」的形式，那么请确保你包含了一个指定的日期或者一个特定的时间。</p>

<h2 id="toc_10">导入格式</h2>

<p>每个导入应该独占一行。导入总应该放在文件顶部，位于模块注释和文档字符串之后，模块全局变量和常量之前，导入应该按照从最通用到最不通用的顺序分组：</p>

<ol>
<li>标准库导入</li>
<li>第三方库导入</li>
<li>应用程序制定导入</li>
</ol>

<p>每种分组中，应该根据每个模块的完整包路径按字典顺序排序，忽略大小写。</p>

<h2 id="toc_11">访问控制</h2>

<p>字啊 Python 中，对于琐碎又不太重要的访问函数，你应该直接使用公有变量来取代它们，这样可以避免额外的函数调用开销。当添加更多的功能时，你可以用属性（property）来保持语法的一致性。</p>

<p>另一方面，如果访问更复杂，或者变量的访问开销很显著，那么你应该使用像 <code>get_foo()</code> 和 <code>set_foo()</code> 这样的函数调用。如果之前的代码行为允许通过属性（property）访问，那么久不要井新的访问函数与属性绑定。这样，任何试图通过老方法访问变量的代码就没法运行，使用者也就会意识到复杂性发生了变化。</p>

<h2 id="toc_12">命名</h2>

<p>Python 之父 Guido 推荐的规范：</p>

<p><img src="media/14871569977647/14872190162425.jpg" alt=""/></p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐系统笔记]]></title>
    <link href="http://forresthcang.com/wiki/14824086421976.html"/>
    <updated>2016-12-22T20:10:42+08:00</updated>
    <id>http://forresthcang.com/wiki/14824086421976.html</id>
    <content type="html">
<![CDATA[<p>开始学习机器学习/数据挖掘相关的内容，打算每学习一部分知识就写一篇博客总结一下，当做学习过程中的笔记，也为以后看的时候提供存档。</p>

<p>这一篇笔记是关于推荐系统的，主要讲了两种推荐算法（基于用户和基于物品的协同过滤）。</p>

<h2 id="toc_0">基于用户的协同过滤</h2>

<h3 id="toc_1">协同过滤（Collaborative filtering）</h3>

<p>一个协作型过滤算法通常的做法是对一大群人进行搜索，并从中找出与我们品味相近的一小群人。算法会对这些人所偏爱的其他内容进行考察，并将它们组合起来构造出一个经过排名的推荐列表。</p>

<h3 id="toc_2">测试数据集</h3>

<p>为了演示一些算法，我们需要从<a href="http://grouplens.org/datasets/movielens/">这个网站</a>上下载一份数据集。这里因为是作为演示使用，所以只需要下载<a href="http://files.grouplens.org/datasets/movielens/ml-latest-small.zip">ml-latest-small.zip</a>这一份简单的数据集就可以了。</p>

<h3 id="toc_3">相似度计算</h3>

<p>在有了数据之后，我们需要有一种方法来确定人们在品味方面的相似程度。为此，我们可以将每个人与所有其他人进行对比，并计算他们的<strong>相似度评价值</strong>。</p>

<h4 id="toc_4">欧几里德距离评价（Euclidean Distance Score）</h4>

<p>欧几里德距离是指多维空间中两点间的距离，这是一种用直尺测量出来的距离。如果我们将两个点分别记作\((p_1, p_2, p_3, p_4, ...)\)和\((q_1, q_2, q_3, q_4, ...)\)，则欧几里德距离的计算公式为：</p>

<p>\[<br/>
\sqrt{((p_1-q_1)^2+(p_2-q_2)^2+...+(p_n-q_n)^2)} = \sqrt{(\sum_{i=1}^n(p_i-q_i)^2)}<br/>
\]</p>

<p>创建 <code>recommendations.py</code>。</p>

<p>用代码表示：</p>

<pre><code class="language-python">from math import sqrt

# 返回一个有关 person1 与 person2 的基于距离的相似度评价
def sim_distance(prefs, person1, person2):
    # 得到 shared_items 的列表
    shared_items = {}
    for item in prefs[person1]:
        if item in prefs[person2]:
        shared_items[item] = 1
    
    # 如果两者没有共同之处，则返回 0
    if len(shared_items) == 0:
        return 0
        
    # 计算所有差值的平方和
    sum_of_squares = sum([pow(prefs[person1][item]-prefs[person2][item], 2)for item in prefs[person1] if item in prefs[person2]])
    
    return 1 / (1 + sqrt(sum_of_squares))
</code></pre>

<p>欧几里德距离计算公式可以计算出距离值，偏好越相似的人，其距离就越短。不过，我们还需要一个函数，来对偏好越相近的情况给出越大的值，为此，我们可以将函数的值加 1（这样就可以避免遇到被 0 整除的错误了），并取其倒数，入上面代码最后一行所示。</p>

<p>好了，现在我们需要先将数据读取进来，在 <code>recommendations.py</code> 中添加如下代码:</p>

<pre><code class="language-python">def loadMovieLens(path=&#39;data&#39;):
    movies = {}
    for line in open(path + &#39;/movies.csv&#39;):
        (id, title) = line.split(&#39;,&#39;)[0:2]
        movies[id] = title

    prefs = {}
    for line in open(path+&#39;/ratings.csv&#39;):
        (user, movieid, rating, ts) = line.split(&#39;,&#39;)
        prefs.setdefault(user, {})
        prefs[user][movies[movieid]] = float(rating)
    return prefs
</code></pre>

<p>在 ipython 交互环境中：</p>

<pre><code class="language-python">&gt;&gt;&gt; import recommendations
&gt;&gt;&gt; prefs = recommendations.loadMovieLens()
&gt;&gt;&gt; # 比较 10 号用户 和 20 号用户的相似度评价
&gt;&gt;&gt; recommendations.sim_distance(prefs, &#39;10&#39;, &#39;20&#39;)
0.23371479611805132
</code></pre>

<h4 id="toc_5">皮尔逊相关系数（Pearson Correlation Coefficient）</h4>

<p>皮尔逊相关系数是一种度量两个变量间相关程度的方法，它是一个介于 1 和 -1 之间的值，其中，1 表示变量完全正相关，0 表示无关， -1 则表示完全负相关（一个变量的值越大，则另一个变量的值反而会越小）。</p>

<p>计算公式：</p>

<p>\[<br/>
r = \frac{\sum{XY}-\frac{\sum X \sum Y}{N}}{\sqrt{(\sum X^2 - \frac{(\sum X)^2}{N})(\sum Y^2 - \frac{(\sum Y)^2}{N})}}<br/>
\]</p>

<p>在 <code>recommendations.py</code> 中添加如下代码：</p>

<pre><code class="language-python">def sim_pearson(prefs, person1, person2):
      # 得到双方都曾评价过的物品列表
    shared_items = {}
    for item in prefs[person1]:
        if item in prefs[person2]:
            shared_items[item] = 1
      # 得到物品列表元素的个数
    n = len(shared_items)

      # 如果两者没有共同元素，则返回0
    if n == 0:
        return 0

      # 计算 person1 和 person2 的皮尔逊相关系数
    sumxy = sum([prefs[person1][item] * prefs[person2][item]
                for item in shared_items])
    sumx = sum([prefs[person1][item] for item in shared_items])
    sumy = sum([prefs[person2][item] for item in shared_items])
    sumx2 = sum([prefs[person1][item] ** 2 for item in shared_items])
    sumy2 = sum([prefs[person2][item] ** 2 for item in shared_items])

    zahler = sumxy - (sumx * sumy) / n
    nenner = sqrt((sumx2 - (sumx ** 2) / n) * (sumy2 - (sumy ** 2) / n))
    if nenner == 0:
        return 0
    r = zahler / nenner

    return r
</code></pre>

<p>在 ipython 交互环境中：</p>

<pre><code class="language-python">&gt;&gt;&gt; reload(recommendations)
&gt;&gt;&gt; prefs = recommendations.loadMovieLens()
&gt;&gt;&gt; recommendations.sim_pearson(prefs, &#39;10&#39;, &#39;20&#39;)
0.4908806936738162
</code></pre>

<p>可以看到和上面使用欧几里德距离评价计算出来的相似度是不一样的。</p>

<h4 id="toc_6">关于该使用哪一种相似性度量方法</h4>

<p>除了这两种计算相似度的方法，实际上还有许多别的计算相似度的算法，例如<strong>Tanimoto 分值</strong>。使用哪一种方法，完全取决于具体的应用。</p>

<p>下面的代码中，将使用一个通用的相似性函数来计算相似度，只要它满足以下条件：拥有同样的函数签名，以一个浮点数作为返回值，其数值越大代表相似度越大。</p>

<h3 id="toc_7">寻找相似的用户</h3>

<p>既然我们已经有了对两个人进行比较的函数，下面我们就可以编写，根据指定人员对每个人进行打分，并找出最接近的匹配结果了。</p>

<pre><code class="language-python"># 从反映偏好的字典中返回最佳匹配者
# 返回结果的个数和相似度函数均为可选参数
def topMatches(prefs, person, n=5, similarity=sim_pearson):
    scores = [(similarity(prefs, person, other), other) for other in prefs if other != person]
    
    # 对列表进行排序，评价值最高者排在最前面
    scores.sort(reverse=True)
    return scores[:n]
</code></pre>

<p>在 ipython 交互环境中测试：</p>

<pre><code class="language-python">&gt;&gt;&gt; reload(recommendations)
&gt;&gt;&gt; prefs = recommendations.loadMovieLens()
&gt;&gt;&gt; # 与 40 号用户相似的 10 个用户
&gt;&gt;&gt; recommendations.topMatches(prefs, &#39;40&#39;, n=10)
[(1.0, &#39;63&#39;),
 (1.0, &#39;582&#39;),
 (1.0, &#39;326&#39;),
 (1.0, &#39;260&#39;),
 (1.0, &#39;220&#39;),
 (1.0, &#39;198&#39;),
 (1.0, &#39;153&#39;),
 (1.0, &#39;116&#39;),
 (0.9999999999999947, &#39;474&#39;),
 (0.9999999999999947, &#39;215&#39;)]
</code></pre>

<h3 id="toc_8">推荐物品</h3>

<p>有的时候我们可能不需要寻找相似的用户，例如在购物网站中，我们需要的是一份可能会想要购买的物品列表，一种方法是从相似的用户所购买的物品列表中选出没有购买的，但是这种方法不确定的因素太多，例如可能相似用户还未购买某些物品，而这些物品恰恰就是我们所需要的。</p>

<p>为了解决上面的问题，我们需要通过一个经过加权的评价值来为影片打分，评论者的评分结果因此而形成了先后的排名。为此，我们需要取得所有其他评论者的评价结果，借此得到相似度之后，再乘以他们为每部影片所给的评价值。</p>

<p>以以下数据集为例：</p>

<pre><code>{&#39;Lisa Rose&#39;: {&#39;Lady in the Water&#39;: 2.5,
               &#39;Snakes on a Plane&#39;: 3.5,
               &#39;Just My Luck&#39;: 3.0,
               &#39;Superman Returns&#39;: 3.5,
               &#39;You, Me and Dupree&#39;: 2.5,
               &#39;The Night Listener&#39;: 3.0},
 &#39;Gene Seymour&#39;: {&#39;Lady in the Water&#39;: 3.0,
                  &#39;Snakes on a Plane&#39;: 3.5,
                  &#39;Just My Luck&#39;: 1.5,
                  &#39;Superman Returns&#39;: 5.0,
                  &#39;The Night Listener&#39;: 3.0,
                  &#39;You, Me and Dupree&#39;: 3.5},
 &#39;Michael Phillips&#39;: {&#39;Lady in the Water&#39;: 2.5,
                      &#39;Snakes on a Plane&#39;: 3.0,
                      &#39;Superman Returns&#39;: 3.5,
                      &#39;The Night Listener&#39;: 4.0},
 &#39;Claudia Puig&#39;: {&#39;Snakes on a Plane&#39;: 3.5,
                  &#39;Just My Luck&#39;: 3.0,
                  &#39;The Night Listener&#39;: 4.5,
                  &#39;Superman Returns&#39;: 4.0,
                  &#39;You, Me and Dupree&#39;: 2.5},
 &#39;Mick LaSalle&#39;: {&#39;Lady in the Water&#39;: 3.0,
                  &#39;Snakes on a Plane&#39;: 4.0,
                  &#39;Just My Luck&#39;: 2.0,
                  &#39;Superman Returns&#39;: 3.0,
                  &#39;The Night Listener&#39;: 3.0,
                  &#39;You, Me and Dupree&#39;: 2.0},
 &#39;Jack Matthews&#39;: {&#39;Lady in the Water&#39;: 3.0,
                   &#39;Snakes on a Plane&#39;: 4.0,
                   &#39;The Night Listener&#39;: 3.0,
                   &#39;Superman Returns&#39;: 5.0,
                   &#39;You, Me and Dupree&#39;: 3.5},
 &#39;Toby&#39;: {&#39;Snakes on a Plane&#39;: 4.5,
          &#39;You, Me and Dupree&#39;: 1.0,
          &#39;Superman Returns&#39;: 4.0}}
</code></pre>

<p>假设我们需要给 Toby 提供影片推荐，我们可以根据上面的算法得出一张表：</p>

<table>
<thead>
<tr>
<th>评论者</th>
<th>相似度</th>
<th>Night</th>
<th>S.xNight</th>
<th>Lady</th>
<th>S.xLady</th>
<th>Luck</th>
<th>S.xLuck</th>
</tr>
</thead>

<tbody>
<tr>
<td>Rose</td>
<td>0.99</td>
<td>3.0</td>
<td>2.97</td>
<td>2.5</td>
<td>2.48</td>
<td>3.0</td>
<td>2.97</td>
</tr>
<tr>
<td>Seymour</td>
<td>0.38</td>
<td>3.0</td>
<td>1.14</td>
<td>3.0</td>
<td>1.14</td>
<td>1.5</td>
<td>0.57</td>
</tr>
<tr>
<td>Puig</td>
<td>0.89</td>
<td>4.5</td>
<td>4.02</td>
<td></td>
<td></td>
<td>3.0</td>
<td>2.68</td>
</tr>
<tr>
<td>LaSalle</td>
<td>0.92</td>
<td>3.0</td>
<td>2.77</td>
<td>3.0</td>
<td>2.77</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Matthews</td>
<td>0.66</td>
<td>3.0</td>
<td>1.99</td>
<td>3.0</td>
<td>1.99</td>
<td></td>
<td></td>
</tr>
<tr>
<td>总计</td>
<td></td>
<td></td>
<td>12.89</td>
<td></td>
<td>8.38</td>
<td></td>
<td>8.07</td>
</tr>
<tr>
<td>Sim.Sum</td>
<td></td>
<td></td>
<td>3.84</td>
<td></td>
<td>2.95</td>
<td></td>
<td>3.18</td>
</tr>
<tr>
<td>总计/Sim.Sum</td>
<td></td>
<td></td>
<td>3.35</td>
<td></td>
<td>2.83</td>
<td></td>
<td>2.53</td>
</tr>
</tbody>
</table>

<p>表中列出来每位评论者的相关度评价值，以及他们对三部影片的评分情况。以 S.x 打头的列给出了乘以评价值之后的相似度。如此一来，相比于与我们不相近的人，那些与我们相近的人将会对整体评价拥有更多的贡献。总计所有加权评价值的和。</p>

<p>我们也可以选择利用总计值来计算排名，但是这其中有一个问题，一部受更多人评论的影片会对结果产生很大影响。为了修正这一问题，我们需要除以表总名为 Sim.Sum 的那一行，它代表了<strong>所有对这部电影有过评论的评论者的相似度之和</strong>。对于影片《Lady in the Water》来说，Puig 并未做过评论，所以我们将这部影片的总计值除以所有其他人的相似度之和。</p>

<p>在 <code>recommendations.py</code> 中添加如下代码：</p>

<pre><code class="language-python"># 利用所有其他人评价值得加权平均，为某人提供建议
def getRecommendations(prefs, person, similarity=sim_pearson):
    totals = {}
    simSums = {}
    for other in prefs:
        # 不要和自己做比较
        if other == person:
            continue
        sim = similarity(prefs, person, other)
        
        # 忽略评价值为零或者小于零的情况
        if sim &lt;= 0:
            continue
            
        for item in prefs[other]:
            # 只对自己还未看过的影片进行评价
            if item not in prefs[person] or prefs[person][item] == 0:
                # 相似度*评价值
                totals.setdefault(item, 0)
                totals[item] += prefs[other][item] * sim
                # 相似度之和
                simSums.setdefault(item, 0)
                simSums[item] += sim
        
        # 建立一个归一化的列表
        rankings = [(total / simSums[item], item) for item, total in totals.items()]
        
        # 返回经过排序的列表
        rankings.sort(reverse=True)
        return rankings
</code></pre>

<p>在 ipython 中测试一下：</p>

<pre><code class="language-python">&gt;&gt;&gt; relaod(recommendations)
&gt;&gt;&gt; prefs = recommendations.loadMovieLens()
&gt;&gt;&gt; recommendations.getRecommendations(prefs, &#39;10&#39;)[:20]
[(5.000000000000001,
  &#39;The Slipper and the Rose: The Story of Cinderella (1976)&#39;),
 (5.000000000000001, &#39;Hands on a Hard Body (1996)&#39;),
 (5.000000000000001, &#39;For the Birds (2000)&#39;),
 (5.000000000000001, &#39;Diva (1981)&#39;),
 (5.0, &#39;Zorba the Greek (Alexis Zorbas) (1964)&#39;),
 (5.0, &#39;Zerophilia (2005)&#39;),
 (5.0, &#39;Zelary (2003)&#39;),
 (5.0, &#39;Z Channel: A Magnificent Obsession (2004)&#39;),
 (5.0, &#39;Yossi (Ha-Sippur Shel Yossi) (2012)&#39;),
 (5.0, &#39;World of Tomorrow (2015)&#39;),
 (5.0, &#39;Woody Allen: A Documentary (2012)&#39;),
 (5.0, &#39;Woman on Top (2000)&#39;),
 (5.0, &#39;Without a Clue (1988)&#39;),
 (5.0, &#39;Withnail &amp; I (1987)&#39;),
 (5.0, &#39;Wild Zero (2000)&#39;),
 (5.0, &#39;War Room (2015)&#39;),
 (5.0, &#39;Walker (1987)&#39;),
 (5.0, &#39;Voices from the List (2004)&#39;),
 (5.0, &#39;Videodrome (1983)&#39;),
 (5.0, &#39;Victoria (2015)&#39;)]
</code></pre>

<h3 id="toc_9">匹配商品</h3>

<p>现在我们已经可以为指定人员寻找品味相近的用户，以及如何向其推荐商品。假如我们想要了解哪些物品是相近的，那又该如何呢？</p>

<p>在我们浏览 Amazon 的时候，经常会看到页面底部会推荐与当前浏览的物品相似的商品。这种情况，我们可以通过查看哪些人喜欢某一特定物品，以及这些人喜欢哪些其他物品来决定相似度。事实上，这和我们之前用来计算人与人之间的相似度是一样的，只需要把人和物品相互调换就行了。</p>

<p>我们来编写这个翻转字典的函数：</p>

<pre><code class="language-python">def transformPrefs(prefs):
    result = {}
    for person in prefs:
        for item in prefs[person]:
            result.setdefault[item, {}]
            # 将物品和人对调
            result[item][person] = prefs[person][item]
    return result
</code></pre>

<p>有了这个方法之后，我们就可以复用之前所写的方法了。</p>

<p>在 ipython 环境中测试：</p>

<pre><code class="language-python">&gt;&gt;&gt; load(recommendations)
&gt;&gt;&gt; movies = recommendations.transformPrefs()
&gt;&gt;&gt; recommendations.topMatches(movies, &#39;For the Birds (2000)&#39;)
[(1.000000000000016, &#39;&quot;Silence of the Lambs&#39;),
 (1.0, &#39;World War Z (2013)&#39;),
 (1.0, &#39;Wallace &amp; Gromit in The Curse of the Were-Rabbit (2005)&#39;),
 (1.0, &#39;Tron: Legacy (2010)&#39;),
 (1.0, &#39;Transcendence (2014)&#39;)]
</code></pre>

<p>我们还可以为影片推荐评论者：</p>

<pre><code class="language-python">&gt;&gt;&gt; recommendations.getRecommendations(movies, &#39;For the Birds (2000)&#39;)[:20]
[(5.0, &#39;668&#39;),
 (5.0, &#39;618&#39;),
 (5.0, &#39;543&#39;),
 (5.0, &#39;541&#39;),
 (5.0, &#39;536&#39;),
 (5.0, &#39;52&#39;),
 (5.0, &#39;464&#39;),
 (5.0, &#39;46&#39;),
 (5.0, &#39;409&#39;),
 (5.0, &#39;357&#39;),
 (5.0, &#39;308&#39;),
 (5.0, &#39;296&#39;),
 (5.0, &#39;29&#39;),
 (5.0, &#39;28&#39;),
 (5.0, &#39;197&#39;),
 (5.0, &#39;196&#39;),
 (5.0, &#39;190&#39;),
 (5.0, &#39;131&#39;),
 (5.0, &#39;113&#39;),
 (4.999999999999999, &#39;465&#39;)]
</code></pre>

<h2 id="toc_10">基于物品的协同过滤</h2>

<p>当前所完成的推荐系统，要求我们使用每一位用户的全部评分来构建数据集，这种方法对于小规模的数据集是没有问题的，但是对于像 Amazon 这样有着上百万用户和商品的大型网站而言，讲一个用户同其他所有用户进行比较，然后再对每位用户评过分的商品进行比较，时间花费上是巨大的。</p>

<p>目前为止我们所使用的技术被称为<strong>基于用户的协同过滤</strong>（user-based collaborative filtering）。除此以外，还有一种可供选择的方法被称为<strong>基于物品的协同过滤</strong>（item-based collaborative filtering）。在拥有大量数据集的情况下，基于物品的协同过滤能够得出更好的结论，而且它允许我们将大量的计算任务预先执行，从而使需要给予推荐的用户能够更快地得到他们所要的结果。</p>

<p>基于物品的协同过滤总体思路就是为每件物品预先计算好最为相近的其他物品。然后，当我们想为某位用户提供推荐的时候，就可以查看他曾经评过分的物品，并从中选出排名靠前者，再构造一个加权列表，其中包含了与这些选中物品最相近的其他物品。此处最显著的区别在于，尽管第一步要求我们检查所有的数据，但是物品间的比较不会像用户间比较那么频繁变化。</p>

<h3 id="toc_11">构造物品比较数据集</h3>

<p>为了对物品进行比较，我们要做的第一件事就是编写一个函数，构造一个包含相近物品的完整数据集。构建完数据集之后，我们就可以在需要的时候重复使用它。</p>

<p>将下面代码添加到 <code>recommendations.py</code> 中：</p>

<pre><code class="language-python">def calculateSimilarItems(prefs, n=10):
    # 建立字典，以给出与这些物品最为相近的其他物品
    result = {}
    
    # 以物品为中心最偏好矩阵进行倒置处理
    itemPrefs = transformPrefs(prefs)
    c = 0
    for item in itemPrefs:
        # 针对大数据集更新状态变量
        c += 1
        if c % 100 == 0:
            print &quot;%d / %d&quot; % (c, len(itemPrefs))
        scores = tomMatchs(itemPrefs, item, n=n, similarity=sim_pearson)
        result[item] = scores
    return result
</code></pre>

<p>该函数首先利用了此前定义过得 <code>transformPrefs</code> 函数，对反映评价的字典进行倒置处理，从而得到一个有关物品及其用户评价情况的列表，然后程序又循环遍历每项物品，并将转换了的字典传入 <code>tomMatches</code> 函数中，求得最为相近的物品及其相似度评价值，最后，它建立并返回了一个包含物品及其最相近物品列表的字典。</p>

<p>在 ipython 交互环境中测试：</p>

<pre><code class="language-python">&gt;&gt;&gt; reload(recommendations)
&gt;&gt;&gt; itemsim = recommendations.calculateSimilarItems(prefs)
100 / 8963
200 / 8963
300 / 8963
400 / 8963
500 / 8963
600 / 8963
700 / 8963
800 / 8963
900 / 8963
1000 / 8963
1100 / 8963
1200 / 8963
1300 / 8963
1400 / 8963
1500 / 8963
1600 / 8963
1700 / 8963
1800 / 8963
1900 / 8963
...
</code></pre>

<p>首次运行需要等待一段时间进行计算。</p>

<p>只有频繁执行该函数，才能令物品的相似度不至于过期。通常我们需要在用户基数和评分数量不是很大的时候执行这一函数，但是随着用户数量的不断增长，物品间的相似度评价通常会变得越来越稳定。</p>

<h3 id="toc_12">获得推荐</h3>

<p>现在，我们可以利用反映物品相似度的字典来给出推荐了，我们可以去到用户评价过得所有物品，并找出其相近的物品，根据相似度对其进行加权。</p>

<p>下表给出了利用基于物品的方法寻找推荐的过程，所用到的数据可以在上面<strong>推荐物品</strong>一节中找到。</p>

<p>为 Toby 提供基于物品的推荐：</p>

<table>
<thead>
<tr>
<th>影片</th>
<th>评分</th>
<th>Night</th>
<th>R.xNight</th>
<th>Lady</th>
<th>R.xLady</th>
<th>Luck</th>
<th>R.xLuck</th>
</tr>
</thead>

<tbody>
<tr>
<td>Snakes</td>
<td>4.5</td>
<td>0.182</td>
<td>0.818</td>
<td>0.222</td>
<td>0.999</td>
<td>0.105</td>
<td>0.474</td>
</tr>
<tr>
<td>Superman</td>
<td>4.0</td>
<td>0.103</td>
<td>0.412</td>
<td>0.091</td>
<td>0.363</td>
<td>0.065</td>
<td>0.258</td>
</tr>
<tr>
<td>Dupree</td>
<td>1.0</td>
<td>0.148</td>
<td>0.148</td>
<td>0.4</td>
<td>0.4</td>
<td>0.182</td>
<td>0.182</td>
</tr>
<tr>
<td>总计</td>
<td></td>
<td>0.433</td>
<td>1.378</td>
<td>0.713</td>
<td>1.762</td>
<td>0.352</td>
<td>0.914</td>
</tr>
<tr>
<td>归一化结果</td>
<td></td>
<td></td>
<td>3.183</td>
<td></td>
<td>2.473</td>
<td></td>
<td>2.598</td>
</tr>
</tbody>
</table>

<p>此处每一行都列出了一部我们曾经观看过的影片，以及对该片的个人评价。对于每一部我们还未曾看过的影片，相应有一列会指出它与已观看影片的相似程度。以 R.x 打头的列给出了我们队影片的评价值乘以相似度之后的结果。</p>

<p>总计一行给出了每部影片相似度评价值的总和以及 R.x 列的总和，为了预测我们对每一部影片的评分情况，只要将 R.x 列的总计值除以相似度一列的总计值即可。</p>

<p>在 <code>recommendations.py</code> 中添加如下代码：</p>

<pre><code class="language-python">def getRecommendedItems(prefs, itemMatch, user):
    userRatings = prefs[user]
    scores = {}
    totlaSim = {}
    
    # 循环遍历由当前用户评分的物品
    for (item, rating) in userRatings.items():
        
        # 循环遍历与当前物品相近的物品
        for (similarity, item2) in itemMatch[item]:
        
            # 如果该用户已经对当前物品做过评价，则将其忽略
            if item2 in userRatings:
                continue
            
            # 评价值与相似度加权之和
            scores.setdefault(item2, 0)
            scores[item2] += similarity * rating
            
            # 全部相似度之和
            totalSim.setdefault(item2, 0)
            totalSim[item2] += similarity
            
    # 将每个合计值除以加权和，求出平均值
    rankings = [(score / totalSim[item], item) for item, score in scores.items()]
    
    # 按最高值到最低值的顺序，返回评分结果
    rankings.sort(reverse=True)
    return rankings
</code></pre>

<p>在 ipython 中测试一下：</p>

<pre><code class="language-python">&gt;&gt;&gt; reload(recommendations)
&gt;&gt;&gt; recommendations.getRecommendedItems(prefs, itemsim, &#39;20&#39;)[:10]
[(5.0, &#39;Zoot Suit (1981)&#39;),
 (5.0, &#39;Zoolander (2001)&#39;),
 (5.0, &#39;Zack and Miri Make a Porno (2008)&#39;),
 (5.0, &quot;You&#39;ve Got Mail (1998)&quot;),
 (5.0, &#39;X-Men: The Last Stand (2006)&#39;),
 (5.0, &#39;X-Men: Apocalypse (2016)&#39;),
 (5.0, &#39;X-Men (2000)&#39;),
 (5.0, &quot;Von Ryan&#39;s Express (1965)&quot;),
 (4.75, &#39;Willow (1988)&#39;),
 (4.75, &quot;White Men Can&#39;t Jump (1992)&quot;)]
</code></pre>

<h2 id="toc_13">基于用户进行过滤还是基于物品进行过滤</h2>

<p>在数据集大小上，基于物品进行过滤的方式要比基于用户进行过滤更快；在数据的稀疏程度上，稀疏的数据集使用基于物品的过滤方法更优，而对于秘密集的数据集而言，两者的效果几乎一样。</p>

<p>基于用户的过滤方法更加易于实现，而且无需额外步骤，因此它通常更适用于规模较小的变化非常频繁的数据集。在一些应用中，告诉用户还有哪些人与自己有着相近偏好是有一定价值的——也许对于一个购物网站而言，我们并不想这么做，但是对于一个音乐分享类或者电影评分类网站而言，这种潜在的需求却是存在的。</p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建 Python 科学计算环境]]></title>
    <link href="http://forresthcang.com/wiki/14824083276745.html"/>
    <updated>2016-12-22T20:05:27+08:00</updated>
    <id>http://forresthcang.com/wiki/14824083276745.html</id>
    <content type="html">
<![CDATA[<p>最近在看《Python for Data Analysis》（利用 Python 进行数据分析）这本书，贴一点笔记，这一篇是关于环境搭建的。另外吐槽一下，书中还是有不少错误的，语法错误就发现了好多处，大概读完了之后会整理出一份勘误表出来，可能是因为写书的时候是 14 年，两年过去了，pandas 库也有了一些变化。</p>

<h2 id="toc_0">安装虚拟环境</h2>

<p>不想把系统的 python 库搞得乱乱的（其实已经很乱了），所以还是建一个独立虚拟环境专门来做科学计算吧。具体的方法我在<a href="http://forrestchang.github.io/2016/07/17/virtualenv-notes/">virtualenv 相关笔记</a>这篇博客中已经详细写了，建议将启动虚拟环境的命令添加到终端的配置文件中去（使用<code>alias</code>），这样就避免每次一打开就输入一长串命令了。</p>

<p>因为科学计算社区的一些库还是基于 Python 2.x 版本的，所以这里我们使用的 Python 版本为 2.7。</p>

<p>然后使用以下命令一键安装所需要的库：</p>

<pre><code class="language-shell">sudo pip install numpy pandas matplotlib jupyter scikit-learn
</code></pre>

<p>安装不上的请检查是不是需要翻墙。</p>

<h2 id="toc_1">IPython</h2>

<p>熟悉 Python 的同学应该对这个解释器不陌生，自带的 Python 解释器实在是太弱了。它与传统的“edit-compile-run”（编辑-编译-运行）方式的区别在于，它鼓励使用“execute-explore”（执行-探索），所以特别适合用在计算和数据分析领域，可以方便得使用「试错法」和「迭代法」进行开发。这里主要介绍它基于 Web 的交互式笔记本功能（命令行中大同小异）。</p>

<h3 id="toc_2">开启 IPython Notebook</h3>

<p>使用以下命令来打开 IPython Notebook：</p>

<pre><code class="language-shell">(ENV2.7)$ jupyter notebook
</code></pre>

<p>这样 server 就启动了，浏览器会自动打开一个目录树。</p>

<p>Note：记住在启动了虚拟环境的状态下使用这条命令，要不然就会使用系统的 IPython 版本来运行。</p>

<p>然后我们新建一个 IPython Notebook 用作演示：</p>

<p><img src="media/14824083276745/14776647413275.jpg" alt="14776647413275"/></p>

<p><code>In [1]</code> 中的命令是为了能让我们直接在 IPython Notebook 中集成显示 <code>matplotlib</code> 画的图片，所以如果是用作科学计算的话，首先先执行以下这条命令再说。</p>

<h3 id="toc_3">内省</h3>

<p>在变量的前面或后面加上一个 <code>?</code> 就可以将有关该对象的一些通用信息显示出来。</p>

<p><img src="media/14824083276745/14776649884990.jpg" alt="14776649884990"/></p>

<p>基本上什么都能看。</p>

<h3 id="toc_4"><code>%run</code> 命令</h3>

<p>使用 <code>%run</code> 可以运行本地的 Python 脚本，并可以在 IPython 中访问脚本中定义的所有变量。</p>

<p>如果想要脚本能够访问 IPython 中的命名空间，可以使用 <code>%run -i</code> 命令。</p>

<h3 id="toc_5">测试代码的执行时间</h3>

<p>使用 <code>%time</code> 和 <code>%timeit</code> 可以用来测试代码的执行时间。</p>

<p><img src="media/14824083276745/14776653395450.jpg" alt="14776653395450"/></p>

<h2 id="toc_6">Example</h2>

<p>下面使用一个具体的例子来演示 IPython Notebook 的使用。</p>

<p>使用到的数据可以在<a href="https://www.ssa.gov/oact/babynames/limits.html">Beyond the Top 1000 Names</a>下载到，这是一份包含1880-2015年每年出生婴儿姓名出现次数的数据表。</p>

<p>由于该数据按年份被分割成了好多文件，所以第一步我们需要把所有数据组装到一个 DataFrame 中去。</p>

<p><img src="media/14824083276745/14776659007521.jpg" alt="14776659007521"/></p>

<p>不知道这些 Python 代码没关系，因为这里只是用来演示 IPython Notebook。</p>

<p>然后我们按照性别和年度统计总出生数：</p>

<p><img src="media/14824083276745/14776660937109.jpg" alt="14776660937109"/></p>

<p>然后绘制出表格：</p>

<p><img src="media/14824083276745/14776661445090.jpg" alt="14776661445090"/></p>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtualenv 相关笔记]]></title>
    <link href="http://forresthcang.com/wiki/14824097975366.html"/>
    <updated>2016-12-22T20:29:57+08:00</updated>
    <id>http://forresthcang.com/wiki/14824097975366.html</id>
    <content type="html">
<![CDATA[<h2 id="toc_0">安装</h2>

<p>直接使用 pip 来进行安装：</p>

<pre><code>$ sudo pip install virtualenv
</code></pre>

<h2 id="toc_1">用途</h2>

<p>主要用来创建隔离的 Python 开发环境，比如说一个项目需要用到 2.7 的库，另一个项目需要用到 3.0 的库，我们就可以使用  virtualenv 来分别给这两个项目创建虚拟的 Python 环境，这样可以有效的避免冲突。</p>

<p>virtualenv 会创建一个拥有独立安装目录的 Python 环境，该隔离环境不会与其他 virtualenv 环境共享模块（可以选择是否访问全局安装目录）。</p>

<h2 id="toc_2">使用</h2>

<h3 id="toc_3">创建虚拟环境</h3>

<p>最基本的使用：</p>

<pre><code>$ virtualenv ENV
</code></pre>

<p>其中 <code>ENV</code> 是用来存放虚拟环境的目录。</p>

<pre><code>$tree -L 1 ENV
ENV
├── bin
├── include
├── lib
└── pip-selfcheck.json
</code></pre>

<p>其中 <code>lib</code> 和 <code>include</code> 目录是用来存放新的虚拟 Python 环境的依赖库，Package 被安装到 <code>lib/pythonX.X/site-packages/</code> 中，<code>bin</code> 目录中是新的 Python 解释器。<code>pip</code> 和 <code>setuptools</code> 默认被安装的。</p>

<h3 id="toc_4">active script</h3>

<p>进入虚拟环境：</p>

<pre><code>$ source ENV/bin/active
</code></pre>

<p>（如果 <code>source</code> 命令不存在可以使用 <code>.</code> 命令。）</p>

<p>退出虚拟环境：</p>

<pre><code>$ deactivate
</code></pre>

<h3 id="toc_5">Removing an Environment</h3>

<pre><code>(ENV)$ deactivate
$ rm -r /path/to/ENV
</code></pre>

<h3 id="toc_6"><code>--system-site-packages</code> 选项</h3>

<p>使用 <code>virtualenv --system-site-packages ENV</code> 将会继承全局 packages。并不是很常用的功能。</p>

<h3 id="toc_7">指定 Python 版本</h3>

<p>使用 <code>-p PYTHON_EXE</code> 选项在创建虚拟环境的时候制定 Python 版本。</p>

<p>Python 2.7:</p>

<pre><code>$ virtualenv -p /usr/bin/python2.7 ENV2.7
</code></pre>

<p>Python 3.5:</p>

<pre><code>$ virtualenv -p /usr/local/bin/python3.5 ENV3.5
</code></pre>

<h3 id="toc_8">生成可打包环境</h3>

<p>某些情况下，我们可能需要在别的地方使用这个已经配置好的虚拟环境，可以使用 <code>virtualenv --relocatable</code> 将 ENV 修改为可迁移的。</p>

<pre><code>(ENV)$ virutalenv --relocatable ./
</code></pre>
]]>
    </content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 基础笔记]]></title>
    <link href="http://forresthcang.com/wiki/linux-basic.html"/>
    <updated>2016-03-23T11:09:38+08:00</updated>
    <id>http://forresthcang.com/wiki/linux-basic.html</id>
    <content type="html">
<![CDATA[<h2 id="toc_0">Shell 的基本操作</h2>

<h3 id="toc_1">常用快捷键</h3>

<table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>Tab</code></td>
<td>命令补全</td>
</tr>
<tr>
<td><code>Ctrl+c</code></td>
<td>强行终止当前程序</td>
</tr>
<tr>
<td><code>Ctrl+d</code></td>
<td>键盘输入结束或退出终端</td>
</tr>
<tr>
<td><code>Ctrl+s</code></td>
<td>暂定当前程序，暂停后按下任意键恢复运行</td>
</tr>
<tr>
<td><code>Ctrl+z</code></td>
<td>将当前程序放到后台运行，恢复到前台命令 <code>fg</code></td>
</tr>
<tr>
<td><code>Ctrl+a</code></td>
<td>将光标移动到行首</td>
</tr>
<tr>
<td><code>Ctrl+e</code></td>
<td>将光标移动到行尾</td>
</tr>
<tr>
<td><code>Ctrl+k</code></td>
<td>删除从光标所在位置到行末</td>
</tr>
<tr>
<td><code>Alt+Backspace</code></td>
<td>向前删除一个单词</td>
</tr>
</tbody>
</table>

<h3 id="toc_2">常用通配符</h3>

<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>*</code></td>
<td>匹配0或多个字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td><code>[list]</code></td>
<td>匹配 list 中的任意单一字符</td>
</tr>
<tr>
<td><code>[!list]</code></td>
<td>匹配除 list 中的任意单一字符以外的字符</td>
</tr>
<tr>
<td><code>[c1-c2]</code></td>
<td>匹配c1-c2中的任意单一字符，如[0-9][a-z]</td>
</tr>
<tr>
<td><code>{string1,string2,...}</code></td>
<td>匹配其中一个字符串</td>
</tr>
<tr>
<td><code>{c2..c2</code></td>
<td>匹配c1-c2中全部字符，如{1..10}</td>
</tr>
</tbody>
</table>

<h2 id="toc_3">用户管理</h2>

<h3 id="toc_4">查看用户</h3>

<pre><code>$ who am i
</code></pre>

<p>或者</p>

<pre><code>$ who mon likes
</code></pre>

<p><code>who</code> 命令其他常用参数</p>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>-a</code></td>
<td>打印能打印的全部</td>
</tr>
<tr>
<td><code>-d</code></td>
<td>打印死掉的进程</td>
</tr>
<tr>
<td><code>-m</code></td>
<td>同 <code>am i</code>, <code>mom likes</code></td>
</tr>
<tr>
<td><code>-q</code></td>
<td>打印当前登陆用户数及用户名</td>
</tr>
<tr>
<td><code>-u</code></td>
<td>打印当前登陆用户登陆信息</td>
</tr>
<tr>
<td><code>-r</code></td>
<td>打印运行等级</td>
</tr>
</tbody>
</table>

<h3 id="toc_5">创建用户</h3>

<p>创建用户需要 <code>root</code> 用户的权限，所以需要使用 <code>sudo</code> 这个命令。使用 <code>sudo</code> 名利需要满足两个条件：</p>

<ol>
<li>知道当前登陆用户的密码</li>
<li>当前用户必须在 <code>sudo</code> 用户组</li>
</ol>

<pre><code>$ su &lt;user&gt; # 切换用户到 user
</code></pre>

<pre><code>$ sudo &lt;cmd&gt; # 以 root 权限运行命令
</code></pre>

<pre><code>$ su - &lt;user&gt; # 切换用户，并且环境变量同时改变到目标用户的环境变量
</code></pre>

<p>新建用户命令：</p>

<pre><code>$ sudo adduser &lt;username&gt;
</code></pre>

<p>创建用户的同时会为用户创建 home 目录。</p>

<h3 id="toc_6">用户组</h3>

<p>在 Linux 中每个用户都有一个用户组，它们共享一些资源和权限，同时拥有私有资源。</p>

<h4 id="toc_7">查看自己的用户组</h4>

<pre><code>$ groups &lt;username&gt;
</code></pre>

<p>或者，查看<code>/etc/group</code>文件</p>

<pre><code>$ cat /etc/group | sort
</code></pre>

<p><code>sort</code> 表示将读取的文本进行一个字典排序再输出。</p>

<h5 id="toc_8"><code>etc/group</code> 文件格式说明</h5>

<p>/etc/group 的内容包括用户组（Group）、用户组口令、GID 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：</p>

<blockquote>
<p>group_name:password:GID:user_list</p>
</blockquote>

<h4 id="toc_9">将其他用户加入 sudo 用户组</h4>

<p>使用 <code>usermod</code> 命令可以为用户组添加用户，使用该命令需要有 root 权限。</p>

<p>使用一个具有 root 权限的用户为一个不具有 root 权限的用户添加 <code>sudo</code> 权限：</p>

<pre><code>$ sudo usermod -G sudo &lt;username&gt;
</code></pre>

<h3 id="toc_10">删除用户</h3>

<pre><code>$ sudo deluser &lt;username&gt; --remove-home
</code></pre>

<h2 id="toc_11">文件权限</h2>

<h3 id="toc_12">查看文件权限</h3>

<pre><code>$ ls -l
</code></pre>

<p><img src="media/14587025785185/14587048876862.jpg" alt=""/></p>

<p><img src="media/14587025785185/14587049042865.jpg" alt=""/></p>

<p><img src="media/14587025785185/14587049141674.jpg" alt=""/></p>

<h4 id="toc_13">文件类型</h4>

<p>Linux 里面一切皆文件。</p>

<h4 id="toc_14">文件权限</h4>

<ul>
<li>读权限：可以读取某个文件的内容</li>
<li>写权限：可以编辑和修改某个文件</li>
<li>执行权限：通常指可以运行的二进制程序文件或者脚本文件</li>
</ul>

<p>注：一个目录要同时具有读权限和执行权限才可以打开，要有写权限才允许在其中创建其他文件。Linux 不是用过文件的后缀名来区分文件的类型。</p>

<h4 id="toc_15">链接数</h4>

<p>链接到该文件所在的 inode 结点的文件名数目。</p>

<h3 id="toc_16">修改文件权限</h3>

<h4 id="toc_17">方法1：二进制数字表示</h4>

<p><img src="media/14587025785185/14587054006459.jpg" alt=""/></p>

<p>修改<filename>只能自己使用：</p>

<pre><code>$ chmod 700 &lt;filename&gt;
</code></pre>

<h4 id="toc_18">方法2：加减赋值操作</h4>

<pre><code>$ chmod go-rw &lt;filename&gt;
</code></pre>

<p>&#39;g&#39;&#39;o&#39;还有&#39;u&#39;，分别表示group，others，user，&#39;+&#39;，&#39;-&#39; 就分别表示增加和去掉相应的权限。</p>

<h2 id="toc_19">目录结构</h2>

<p>Windows 是以存储介质为主的，之下才是目录；而 Unix 是以目录为主的，存储介质是挂载在目录上的。Linux 以树形目录结构的形式来构建整个系统。</p>

<h3 id="toc_20">FHS 标准</h3>

<blockquote>
<p>FHS（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数 Linux 版本采用这种文件组织形式，FHS 定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时还给出了例外处理与矛盾处理。</p>
</blockquote>

<p>FHS 定义了两层规范，第一层是，/下面的各个目录应该要放什么文件数据，例如 /etc 应该要放设置文件，/bin 与 /sbin 则应该要放置可执行文件等等。</p>

<p>第二层则是针对 /usr 及 /var 这两个目录的子目录来定义。例如 /var/log 放置系统登录文件，/usr/share 放置共享数据等等。</p>

<p><img src="media/14587025785185/14587064442333.jpg" alt=""/></p>

<p>FSH 是根据以往无数 Linux 用户和开发者的经验总结出来的，并且会持续更新，FSH 依据文件系统使用的频繁与否以及是否允许用户随意改动，将目录定义为四中交互作用的形态，如下表示：</p>

<p><img src="media/14587025785185/14587065471253.jpg" alt=""/></p>

<h3 id="toc_21">目录路径</h3>

<h4 id="toc_22">绝对路径</h4>

<p>以根目录为起点的完整路径。</p>

<h4 id="toc_23">相对路径</h4>

<p>相对于你当前目录的路径。</p>

<h2 id="toc_24">文件的基本操作</h2>

<h3 id="toc_25">新建</h3>

<h4 id="toc_26">新建空白文件</h4>

<pre><code>$ touch test
</code></pre>

<p>关于 <code>touch</code> 命令，其主要是用来更改文件时间戳的。</p>

<h4 id="toc_27">新建目录</h4>

<pre><code>$ mkdir testDir
</code></pre>

<p>使用 <code>-p</code> 参数，可以创建一个多级目录，例如：</p>

<pre><code>$ mkdir -p father/son/grandson
</code></pre>

<h3 id="toc_28">复制</h3>

<h4 id="toc_29">复制文件</h4>

<pre><code>$ cp test testDir
</code></pre>

<h4 id="toc_30">复制目录</h4>

<pre><code>$ cp -r father family
</code></pre>

<h3 id="toc_31">删除</h3>

<pre><code>$ rm test
</code></pre>

<p>参数 <code>-f</code> 可以强制删除一些为只读权限的文件。</p>

<pre><code>$ rm -f test
</code></pre>

<p>删除一个目录：</p>

<pre><code>$ rm -r testDir
</code></pre>

<h3 id="toc_32">移动文件</h3>

<pre><code>$ mv testFile testDir
</code></pre>

<h3 id="toc_33">重命名文件</h3>

<p><code>mv</code> 命令还有重命名的作用：</p>

<pre><code>$ mv oldName newName
</code></pre>

<h3 id="toc_34">查看文件</h3>

<h4 id="toc_35"><code>cat</code> 与 <code>tac</code></h4>

<p>这两个命令都是用来打印文件内容到标准输出（终端），其中<code>cat</code> 为正序显示，<code>tac</code> 为倒序显示。</p>

<blockquote>
<p>标准输入输出：当我们执行一个 shell 命令行时通常会自动打开三个标准文件，即标准输入文件（stdin），默认对应终端的键盘；标准输出文件（stdout）和标准错误输出文件（stderr），这两个文件都对应被重定向到终端的屏幕，以便我们能直接看到输出内容。进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。</p>
</blockquote>

<p>可以使用<code>-n</code> 参数来显示行号：</p>

<pre><code>$ cat -n &lt;filename&gt;
</code></pre>

<h4 id="toc_36"><code>nl</code></h4>

<p>添加行号并打印，比 <code>cat</code> 更加强大，参数说明：</p>

<pre><code>-b : 指定添加行号的方式，主要有两种：
    -b a:表示无论是否为空行，同样列出行号(&quot;cat -n&quot;就是这种方式)
    -b t:只列出非空行的编号并列出（默认为这种方式）
-n : 设置行号的样式，主要有三种：
    -n ln:在行号字段最左端显示
    -n rn:在行号字段最右边显示，且不加 0
    -n rz:在行号字段最右边显示，且加 0
-w : 行号字段占用的位数(默认为 6 位)
</code></pre>

<h3 id="toc_37">查看文件类型</h3>

<p>使用 <code>file</code> 命令来查看文件类型：</p>

<pre><code>$ file /bin/ls
</code></pre>

<p><img src="media/14587025785185/14587183045128.jpg" alt=""/></p>

<p>这表示这是一个可执行文件。</p>

<h2 id="toc_38">环境变量</h2>

<h3 id="toc_39">变量</h3>

<p>使用<code>declare</code>命令可以创建一个变量：</p>

<pre><code>$ declare tmp
</code></pre>

<p>读取变量的值，使用<code>echo</code>命令和<code>$</code>符号：</p>

<pre><code>$ echo $tmp
</code></pre>

<h3 id="toc_40">环境变量</h3>

<p>环境变量就是作用域比自己定义的变量要大，如 Shell 的环境变量作用于自身和它的子进程。例如 Shell 环境变量作用于自身和它的子进程。在类 UNIX 系统中，每个进程都有其各自的环境变量设置，当一个进程被创建时，处理创建过程中明确指定的话，它将继承其父进程的绝大部分环境设置。</p>

<p>通常我们会涉及到的环境变量有三种：</p>

<ul>
<li>当前 Shell 进程私有用户自定义变量，只在当前 Shell 中有效</li>
<li>Shell 本身内建的变量</li>
<li>从自定义变量导出的环境变量</li>
</ul>

<p><code>set</code>, <code>env</code>, <code>export</code>这三个命令可以用来打印相关环境变量，区别在于涉及的是不同范围的环境变量：</p>

<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>set</code></td>
<td>显示当前 shell 所有环境变量，包括其内建环境变量、用户自定义变量及导出的环境变量</td>
</tr>
<tr>
<td><code>env</code></td>
<td>显示与当前用户相关的环境变量，还可以让命令在制定环境中运行</td>
</tr>
<tr>
<td><code>export</code></td>
<td>显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量</td>
</tr>
</tbody>
</table>

<p><img src="media/14587025785185/14592405427797.jpg" alt=""/></p>

<h3 id="toc_41">命令的查找路径与顺序</h3>

<p>Shell 通过环境变量<code>PATH</code>来搜索命令。</p>

<p>查看 <code>PATH</code> 环境变量的内容：</p>

<pre><code>$ echo $PATH
</code></pre>

<p>输出的内容为：</p>

<pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
</code></pre>

<p>这些目录下面存放的都是可执行文件。</p>

<h3 id="toc_42">添加自定义路径到<code>PATH</code> 环境变量</h3>

<p><code>PATH</code>里面的路径是以<code>:</code>作为分隔符，所以可以这样添加自定义路径：</p>

<pre><code>$ PATH=$PATH:/home/xxxx
</code></pre>

<p>注意到这里一定要使用绝对路径。</p>

<p>这种修改的方式只对当前的 Shell 有效，要想让每个用户都讷讷够使用，需要更改相应的配置文件，例如<code>zsh</code>需要修改相应的<code>.zshrc</code>。</p>

<h3 id="toc_43">修改和删除已有变量</h3>

<p>可以使用<code>unset</code>命令来删除一个环境变量：</p>

<pre><code>$ unset temp
</code></pre>

<h3 id="toc_44">如何让环境变量立即生效</h3>

<p>在修改了配置文件后，可以使用<code>source</code>命令来让其立即生效：</p>

<pre><code>$ source .zshrc
</code></pre>

<h2 id="toc_45">搜索文件</h2>

<h3 id="toc_46"><code>whereis</code>简单快速</h3>

<pre><code>$ whereis who
</code></pre>

<p><code>whereis</code>只能搜索二进制文件(-b)，man 帮助文件(-m)和源代码文件(-s)。</p>

<h3 id="toc_47"><code>locate</code>快而全</h3>

<p>通过<code>/var/lib/mlocate/mlocate.db</code>数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行<code>updatedb</code>命令更新一次，所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次<code>updatedb</code>命令。他可以用来查找指定目录下的不同文件类型，例如查找/usr/share/下所有的 jpg 文件：</p>

<pre><code>$ locate /usr/share/\*.jpg
</code></pre>

<p>注意要添加<code>*</code>号前面的反斜杠转义，否则会无法找到</p>

<h3 id="toc_48"><code>which</code>小而精</h3>

<p>我们通常使用<code>which</code>来确定是否安装了某个指定的软件，因为它只从<code>PATH</code> 环境变量指定的路径中去搜索命令：</p>

<pre><code>$ which man
</code></pre>

<h3 id="toc_49"><code>find</code> 精而细</h3>

<p><code>find</code>命令应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找，而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索。</p>

<p>在指定目录下搜索指定文件名的文件：</p>

<pre><code>$ find /etc/ -name interface
</code></pre>

<p><code>find</code> 命令的基本参数格式为：<code>find [path] [option] [action]</code></p>

<p>与时间相关的命令参数：</p>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>-atime</code></td>
<td>最后访问时间</td>
</tr>
<tr>
<td><code>-ctime</code></td>
<td>创建时间</td>
</tr>
<tr>
<td><code>-mtime</code></td>
<td>最后修改时间</td>
</tr>
</tbody>
</table>
]]>
    </content>
  </entry>
  
</feed>
